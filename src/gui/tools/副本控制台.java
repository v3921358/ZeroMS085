
package gui.tools;

import database.DatabaseConnection;
import gui.ZeroMS_UI;
import handling.world.MapleParty;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import provider.MapleData;
import provider.MapleDataProvider;
import provider.MapleDataProviderFactory;
import provider.MapleDataTool;
import scripting.ReactorScriptManager;
import org.jvnet.substance.skin.SubstanceBusinessBlackSteelLookAndFeel;

/**
 *
 * @author Administrator
 */
public class 副本控制台 extends javax.swing.JFrame {

    /**
     * Creates new form 副本奖励控制台
     */
    public 副本控制台() {
        ImageIcon icon = new ImageIcon(getClass().getClassLoader().getResource("Image/Icon.png"));
        setTitle("副本控制台");
        setIconImage(icon.getImage());
        Properties 設定檔 = System.getProperties();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane41 = new javax.swing.JScrollPane();
        废都副本奖励 = new javax.swing.JTable();
        新增废都奖励 = new javax.swing.JButton();
        废都奖励随机下限 = new javax.swing.JTextField();
        废都奖励随机上限 = new javax.swing.JTextField();
        废都奖励代码 = new javax.swing.JTextField();
        废都奖励获得概率 = new javax.swing.JTextField();
        删除废都奖励 = new javax.swing.JButton();
        刷新废都副本奖励 = new javax.swing.JButton();
        jScrollPane42 = new javax.swing.JScrollPane();
        废都最小人数 = new javax.swing.JTable();
        jScrollPane43 = new javax.swing.JScrollPane();
        废都最大人数 = new javax.swing.JTable();
        jScrollPane44 = new javax.swing.JScrollPane();
        废都最高等级 = new javax.swing.JTable();
        jScrollPane45 = new javax.swing.JScrollPane();
        废都最低等级 = new javax.swing.JTable();
        废都1 = new javax.swing.JTextField();
        废都修改1 = new javax.swing.JButton();
        废都2 = new javax.swing.JTextField();
        废都修改2 = new javax.swing.JButton();
        废都3 = new javax.swing.JTextField();
        废都修改3 = new javax.swing.JButton();
        废都4 = new javax.swing.JTextField();
        废都修改4 = new javax.swing.JButton();
        刷新废都设置 = new javax.swing.JButton();
        jScrollPane46 = new javax.swing.JScrollPane();
        废都第一关经验 = new javax.swing.JTable();
        废都5 = new javax.swing.JTextField();
        废都修改5 = new javax.swing.JButton();
        jScrollPane47 = new javax.swing.JScrollPane();
        废都第2至4关经验 = new javax.swing.JTable();
        废都6 = new javax.swing.JTextField();
        废都修改6 = new javax.swing.JButton();
        jScrollPane48 = new javax.swing.JScrollPane();
        废都通关经验 = new javax.swing.JTable();
        废都7 = new javax.swing.JTextField();
        废都修改7 = new javax.swing.JButton();
        jScrollPane49 = new javax.swing.JScrollPane();
        废都通关金币 = new javax.swing.JTable();
        废都8 = new javax.swing.JTextField();
        废都修改8 = new javax.swing.JButton();
        jLabel70 = new javax.swing.JLabel();
        jLabel207 = new javax.swing.JLabel();
        jLabel208 = new javax.swing.JLabel();
        jLabel209 = new javax.swing.JLabel();
        jLabel210 = new javax.swing.JLabel();
        废都奖励名称 = new javax.swing.JTextField();
        jLabel211 = new javax.swing.JLabel();
        修改废都奖励 = new javax.swing.JButton();
        废都奖励序号 = new javax.swing.JTextField();
        jLabel212 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        刷新玩具塔副本奖励 = new javax.swing.JButton();
        jLabel77 = new javax.swing.JLabel();
        jScrollPane51 = new javax.swing.JScrollPane();
        玩具塔最小人数 = new javax.swing.JTable();
        jScrollPane52 = new javax.swing.JScrollPane();
        玩具塔最大人数 = new javax.swing.JTable();
        jScrollPane53 = new javax.swing.JScrollPane();
        玩具塔最高等级 = new javax.swing.JTable();
        jScrollPane54 = new javax.swing.JScrollPane();
        玩具塔最低等级 = new javax.swing.JTable();
        玩具塔1 = new javax.swing.JTextField();
        玩具塔修改1 = new javax.swing.JButton();
        玩具塔2 = new javax.swing.JTextField();
        玩具塔修改2 = new javax.swing.JButton();
        玩具塔3 = new javax.swing.JTextField();
        玩具塔修改3 = new javax.swing.JButton();
        玩具塔4 = new javax.swing.JTextField();
        玩具塔修改4 = new javax.swing.JButton();
        刷新玩具塔设置 = new javax.swing.JButton();
        jScrollPane55 = new javax.swing.JScrollPane();
        玩具塔第一关经验 = new javax.swing.JTable();
        玩具塔5 = new javax.swing.JTextField();
        玩具塔修改5 = new javax.swing.JButton();
        jScrollPane56 = new javax.swing.JScrollPane();
        玩具塔第二关经验 = new javax.swing.JTable();
        jScrollPane57 = new javax.swing.JScrollPane();
        玩具塔第三关经验 = new javax.swing.JTable();
        jScrollPane58 = new javax.swing.JScrollPane();
        玩具塔第四关经验 = new javax.swing.JTable();
        jScrollPane59 = new javax.swing.JScrollPane();
        玩具塔第五关经验 = new javax.swing.JTable();
        jScrollPane60 = new javax.swing.JScrollPane();
        玩具塔第六关经验 = new javax.swing.JTable();
        jScrollPane61 = new javax.swing.JScrollPane();
        玩具塔第七关经验 = new javax.swing.JTable();
        jScrollPane62 = new javax.swing.JScrollPane();
        玩具塔第八关经验 = new javax.swing.JTable();
        jScrollPane63 = new javax.swing.JScrollPane();
        玩具塔第九关经验 = new javax.swing.JTable();
        玩具塔6 = new javax.swing.JTextField();
        玩具塔修改6 = new javax.swing.JButton();
        玩具塔7 = new javax.swing.JTextField();
        玩具塔修改7 = new javax.swing.JButton();
        玩具塔8 = new javax.swing.JTextField();
        玩具塔修改8 = new javax.swing.JButton();
        玩具塔9 = new javax.swing.JTextField();
        玩具塔修改9 = new javax.swing.JButton();
        玩具塔10 = new javax.swing.JTextField();
        玩具塔修改10 = new javax.swing.JButton();
        玩具塔11 = new javax.swing.JTextField();
        玩具塔修改11 = new javax.swing.JButton();
        玩具塔12 = new javax.swing.JTextField();
        玩具塔修改12 = new javax.swing.JButton();
        玩具塔13 = new javax.swing.JTextField();
        玩具塔修改13 = new javax.swing.JButton();
        jScrollPane64 = new javax.swing.JScrollPane();
        玩具塔通关经验 = new javax.swing.JTable();
        玩具塔14 = new javax.swing.JTextField();
        玩具塔修改14 = new javax.swing.JButton();
        jScrollPane65 = new javax.swing.JScrollPane();
        玩具塔通关金币 = new javax.swing.JTable();
        玩具塔15 = new javax.swing.JTextField();
        玩具塔修改15 = new javax.swing.JButton();
        jScrollPane83 = new javax.swing.JScrollPane();
        玩具塔奖励箱子 = new javax.swing.JTable();
        jLabel106 = new javax.swing.JLabel();
        刷新玩具塔箱子 = new javax.swing.JButton();
        删除玩具箱子物品 = new javax.swing.JButton();
        删除玩具箱子物品代码 = new javax.swing.JTextField();
        新增玩具箱子物品 = new javax.swing.JButton();
        增加玩具箱子物品 = new javax.swing.JTextField();
        玩具箱子物品概率 = new javax.swing.JTextField();
        挖矿序列号1 = new javax.swing.JTextField();
        jButton20 = new javax.swing.JButton();
        jLabel108 = new javax.swing.JLabel();
        jLabel109 = new javax.swing.JLabel();
        jLabel110 = new javax.swing.JLabel();
        删除玩具箱子物品1 = new javax.swing.JButton();
        jScrollPane81 = new javax.swing.JScrollPane();
        玩具塔副本奖励 = new javax.swing.JTable();
        新增玩具塔奖励 = new javax.swing.JButton();
        玩具塔奖励随机下限 = new javax.swing.JTextField();
        玩具塔奖励随机上限 = new javax.swing.JTextField();
        玩具塔奖励代码 = new javax.swing.JTextField();
        玩具塔奖励获得概率 = new javax.swing.JTextField();
        删除玩具塔奖励 = new javax.swing.JButton();
        jLabel219 = new javax.swing.JLabel();
        jLabel220 = new javax.swing.JLabel();
        jLabel221 = new javax.swing.JLabel();
        jLabel222 = new javax.swing.JLabel();
        玩具塔奖励名称 = new javax.swing.JTextField();
        jLabel223 = new javax.swing.JLabel();
        修改玩具塔奖励 = new javax.swing.JButton();
        玩具塔奖励序号 = new javax.swing.JTextField();
        jLabel224 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        刷新海盗副本奖励 = new javax.swing.JButton();
        jLabel103 = new javax.swing.JLabel();
        jScrollPane80 = new javax.swing.JScrollPane();
        海盗最小人数 = new javax.swing.JTable();
        jScrollPane82 = new javax.swing.JScrollPane();
        海盗最大人数 = new javax.swing.JTable();
        jScrollPane84 = new javax.swing.JScrollPane();
        海盗最高等级 = new javax.swing.JTable();
        jScrollPane86 = new javax.swing.JScrollPane();
        海盗最低等级 = new javax.swing.JTable();
        海盗最小人数代码 = new javax.swing.JTextField();
        海盗1 = new javax.swing.JButton();
        海盗最大人数代码 = new javax.swing.JTextField();
        海盗2 = new javax.swing.JButton();
        海盗最低等级代码 = new javax.swing.JTextField();
        海盗3 = new javax.swing.JButton();
        海盗最高等级代码 = new javax.swing.JTextField();
        海盗4 = new javax.swing.JButton();
        jScrollPane87 = new javax.swing.JScrollPane();
        海盗通关经验 = new javax.swing.JTable();
        jScrollPane88 = new javax.swing.JScrollPane();
        海盗通关金币 = new javax.swing.JTable();
        海盗通关经验代码 = new javax.swing.JTextField();
        海盗5 = new javax.swing.JButton();
        海盗通关金币代码 = new javax.swing.JTextField();
        海盗6 = new javax.swing.JButton();
        刷新海盗设置 = new javax.swing.JButton();
        jScrollPane100 = new javax.swing.JScrollPane();
        海盗副本奖励 = new javax.swing.JTable();
        新增海盗奖励 = new javax.swing.JButton();
        海盗奖励随机下限 = new javax.swing.JTextField();
        海盗奖励随机上限 = new javax.swing.JTextField();
        海盗奖励代码 = new javax.swing.JTextField();
        海盗奖励获得概率 = new javax.swing.JTextField();
        删除海盗奖励 = new javax.swing.JButton();
        jLabel225 = new javax.swing.JLabel();
        jLabel226 = new javax.swing.JLabel();
        jLabel227 = new javax.swing.JLabel();
        jLabel228 = new javax.swing.JLabel();
        海盗奖励名称 = new javax.swing.JTextField();
        jLabel229 = new javax.swing.JLabel();
        修改海盗奖励 = new javax.swing.JButton();
        海盗奖励序号 = new javax.swing.JTextField();
        jLabel230 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        刷新月妙副本奖励 = new javax.swing.JButton();
        jScrollPane35 = new javax.swing.JScrollPane();
        刷新最小人数 = new javax.swing.JTable();
        刷新月妙设置 = new javax.swing.JButton();
        jScrollPane36 = new javax.swing.JScrollPane();
        刷新最大人数 = new javax.swing.JTable();
        jScrollPane37 = new javax.swing.JScrollPane();
        刷新最高等级 = new javax.swing.JTable();
        jScrollPane38 = new javax.swing.JScrollPane();
        刷新最低等级 = new javax.swing.JTable();
        jScrollPane39 = new javax.swing.JScrollPane();
        月妙通关经验 = new javax.swing.JTable();
        月妙1 = new javax.swing.JTextField();
        修改1 = new javax.swing.JButton();
        月妙2 = new javax.swing.JTextField();
        修改2 = new javax.swing.JButton();
        月妙3 = new javax.swing.JTextField();
        修改3 = new javax.swing.JButton();
        月妙4 = new javax.swing.JTextField();
        修改4 = new javax.swing.JButton();
        月妙5 = new javax.swing.JTextField();
        修改5 = new javax.swing.JButton();
        jScrollPane40 = new javax.swing.JScrollPane();
        月妙通关金币 = new javax.swing.JTable();
        月妙6 = new javax.swing.JTextField();
        修改6 = new javax.swing.JButton();
        jLabel69 = new javax.swing.JLabel();
        jScrollPane101 = new javax.swing.JScrollPane();
        月妙副本奖励 = new javax.swing.JTable();
        新增月妙奖励 = new javax.swing.JButton();
        月妙奖励随机下限 = new javax.swing.JTextField();
        月妙奖励随机上限 = new javax.swing.JTextField();
        月妙奖励代码 = new javax.swing.JTextField();
        月妙奖励获得概率 = new javax.swing.JTextField();
        删除月妙奖励 = new javax.swing.JButton();
        jLabel231 = new javax.swing.JLabel();
        jLabel232 = new javax.swing.JLabel();
        jLabel233 = new javax.swing.JLabel();
        jLabel234 = new javax.swing.JLabel();
        月妙奖励名称 = new javax.swing.JTextField();
        jLabel235 = new javax.swing.JLabel();
        修改月妙奖励 = new javax.swing.JButton();
        月妙奖励序号 = new javax.swing.JTextField();
        jLabel236 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jLabel84 = new javax.swing.JLabel();
        刷新女神塔副本奖励 = new javax.swing.JButton();
        jScrollPane67 = new javax.swing.JScrollPane();
        女神塔最小人数 = new javax.swing.JTable();
        jScrollPane68 = new javax.swing.JScrollPane();
        女神塔最大人数 = new javax.swing.JTable();
        jScrollPane69 = new javax.swing.JScrollPane();
        女神塔最高等级 = new javax.swing.JTable();
        jScrollPane70 = new javax.swing.JScrollPane();
        女神塔最低等级 = new javax.swing.JTable();
        女神塔1 = new javax.swing.JTextField();
        女神塔修改1 = new javax.swing.JButton();
        女神塔2 = new javax.swing.JTextField();
        女神塔修改2 = new javax.swing.JButton();
        女神塔3 = new javax.swing.JTextField();
        女神塔修改3 = new javax.swing.JButton();
        女神塔4 = new javax.swing.JTextField();
        女神塔修改4 = new javax.swing.JButton();
        刷新女神塔设置 = new javax.swing.JButton();
        jScrollPane71 = new javax.swing.JScrollPane();
        女神塔第一关经验 = new javax.swing.JTable();
        jScrollPane72 = new javax.swing.JScrollPane();
        女神塔仓库经验 = new javax.swing.JTable();
        jScrollPane73 = new javax.swing.JScrollPane();
        女神塔休息室经验 = new javax.swing.JTable();
        jScrollPane74 = new javax.swing.JScrollPane();
        女神塔大厅经验 = new javax.swing.JTable();
        jScrollPane75 = new javax.swing.JScrollPane();
        女神塔封印室经验 = new javax.swing.JTable();
        jScrollPane76 = new javax.swing.JScrollPane();
        女神塔散步路经验 = new javax.swing.JTable();
        jScrollPane77 = new javax.swing.JScrollPane();
        女神塔通道经验 = new javax.swing.JTable();
        女神塔5 = new javax.swing.JTextField();
        女神塔修改5 = new javax.swing.JButton();
        女神塔6 = new javax.swing.JTextField();
        女神塔修改6 = new javax.swing.JButton();
        女神塔7 = new javax.swing.JTextField();
        女神塔修改7 = new javax.swing.JButton();
        女神塔8 = new javax.swing.JTextField();
        女神塔修改8 = new javax.swing.JButton();
        女神塔9 = new javax.swing.JTextField();
        女神塔修改9 = new javax.swing.JButton();
        女神塔10 = new javax.swing.JTextField();
        女神塔修改10 = new javax.swing.JButton();
        女神塔11 = new javax.swing.JTextField();
        女神塔修改11 = new javax.swing.JButton();
        jScrollPane78 = new javax.swing.JScrollPane();
        女神塔通关经验 = new javax.swing.JTable();
        jScrollPane79 = new javax.swing.JScrollPane();
        女神塔通关金币 = new javax.swing.JTable();
        女神塔12 = new javax.swing.JTextField();
        女神塔修改12 = new javax.swing.JButton();
        女神塔13 = new javax.swing.JTextField();
        女神塔修改13 = new javax.swing.JButton();
        jLabel107 = new javax.swing.JLabel();
        jScrollPane85 = new javax.swing.JScrollPane();
        女神塔奖励箱子 = new javax.swing.JTable();
        删除女神箱子物品 = new javax.swing.JButton();
        删除女神箱子物品代码 = new javax.swing.JTextField();
        新增玩具箱子物品1 = new javax.swing.JButton();
        增加女神箱子物品 = new javax.swing.JTextField();
        女神箱子物品概率 = new javax.swing.JTextField();
        挖矿序列号2 = new javax.swing.JTextField();
        jButton21 = new javax.swing.JButton();
        jLabel111 = new javax.swing.JLabel();
        jLabel112 = new javax.swing.JLabel();
        jLabel120 = new javax.swing.JLabel();
        删除玩具箱子物品3 = new javax.swing.JButton();
        刷新女神塔设置1 = new javax.swing.JButton();
        jScrollPane102 = new javax.swing.JScrollPane();
        女神塔副本奖励 = new javax.swing.JTable();
        新增女神塔奖励 = new javax.swing.JButton();
        女神塔奖励随机下限 = new javax.swing.JTextField();
        女神塔奖励随机上限 = new javax.swing.JTextField();
        女神塔奖励代码 = new javax.swing.JTextField();
        女神塔奖励获得概率 = new javax.swing.JTextField();
        删除女神塔奖励 = new javax.swing.JButton();
        jLabel237 = new javax.swing.JLabel();
        jLabel238 = new javax.swing.JLabel();
        jLabel239 = new javax.swing.JLabel();
        jLabel240 = new javax.swing.JLabel();
        女神塔奖励名称 = new javax.swing.JTextField();
        jLabel241 = new javax.swing.JLabel();
        修改女神塔奖励 = new javax.swing.JButton();
        女神塔奖励序号 = new javax.swing.JTextField();
        jLabel242 = new javax.swing.JLabel();
        毒雾森林 = new javax.swing.JPanel();
        刷新月妙副本奖励1 = new javax.swing.JButton();
        jScrollPane89 = new javax.swing.JScrollPane();
        毒雾森林最小人数 = new javax.swing.JTable();
        刷新毒雾森林设置 = new javax.swing.JButton();
        jScrollPane90 = new javax.swing.JScrollPane();
        毒雾森林最大人数 = new javax.swing.JTable();
        jScrollPane91 = new javax.swing.JScrollPane();
        毒雾森林最高等级 = new javax.swing.JTable();
        jScrollPane92 = new javax.swing.JScrollPane();
        毒雾森林最低等级 = new javax.swing.JTable();
        jScrollPane93 = new javax.swing.JScrollPane();
        毒雾森林通关经验 = new javax.swing.JTable();
        毒雾森林1 = new javax.swing.JTextField();
        毒雾森林10 = new javax.swing.JButton();
        毒雾森林2 = new javax.swing.JTextField();
        毒雾森林20 = new javax.swing.JButton();
        毒雾森林3 = new javax.swing.JTextField();
        毒雾森林30 = new javax.swing.JButton();
        毒雾森林4 = new javax.swing.JTextField();
        毒雾森林40 = new javax.swing.JButton();
        毒雾森林5 = new javax.swing.JTextField();
        毒雾森林50 = new javax.swing.JButton();
        jScrollPane94 = new javax.swing.JScrollPane();
        毒雾森林通关金币 = new javax.swing.JTable();
        毒雾森林6 = new javax.swing.JTextField();
        毒雾森林60 = new javax.swing.JButton();
        jLabel118 = new javax.swing.JLabel();
        jScrollPane103 = new javax.swing.JScrollPane();
        毒雾副本奖励 = new javax.swing.JTable();
        新增毒雾奖励 = new javax.swing.JButton();
        毒雾奖励随机下限 = new javax.swing.JTextField();
        毒雾奖励随机上限 = new javax.swing.JTextField();
        毒雾奖励代码 = new javax.swing.JTextField();
        毒雾奖励获得概率 = new javax.swing.JTextField();
        删除毒雾奖励 = new javax.swing.JButton();
        jLabel243 = new javax.swing.JLabel();
        jLabel244 = new javax.swing.JLabel();
        jLabel245 = new javax.swing.JLabel();
        jLabel246 = new javax.swing.JLabel();
        毒雾奖励名称 = new javax.swing.JTextField();
        jLabel247 = new javax.swing.JLabel();
        修改毒雾奖励 = new javax.swing.JButton();
        毒雾奖励序号 = new javax.swing.JTextField();
        jLabel248 = new javax.swing.JLabel();
        罗密欧 = new javax.swing.JPanel();

        setResizable(false);

        jTabbedPane3.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N

        jPanel18.setBackground(new java.awt.Color(255, 255, 255));
        jPanel18.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        废都副本奖励.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "序号", "代码", "随机下限", "随机上限", "获得概率", "物品名"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        废都副本奖励.getTableHeader().setReorderingAllowed(false);
        jScrollPane41.setViewportView(废都副本奖励);
        if (废都副本奖励.getColumnModel().getColumnCount() > 0) {
            废都副本奖励.getColumnModel().getColumn(0).setResizable(false);
            废都副本奖励.getColumnModel().getColumn(1).setResizable(false);
            废都副本奖励.getColumnModel().getColumn(1).setPreferredWidth(100);
            废都副本奖励.getColumnModel().getColumn(2).setResizable(false);
            废都副本奖励.getColumnModel().getColumn(3).setResizable(false);
            废都副本奖励.getColumnModel().getColumn(4).setResizable(false);
            废都副本奖励.getColumnModel().getColumn(5).setResizable(false);
            废都副本奖励.getColumnModel().getColumn(5).setPreferredWidth(120);
        }

        jPanel18.add(jScrollPane41, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, 540, 450));

        新增废都奖励.setText("新增");
        新增废都奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                新增废都奖励ActionPerformed(evt);
            }
        });
        jPanel18.add(新增废都奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 580, -1, 30));
        jPanel18.add(废都奖励随机下限, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 520, 80, 30));
        jPanel18.add(废都奖励随机上限, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 520, 80, 30));
        jPanel18.add(废都奖励代码, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 520, 90, 30));
        jPanel18.add(废都奖励获得概率, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 520, 70, 30));

        删除废都奖励.setText("删除");
        删除废都奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                删除废都奖励ActionPerformed(evt);
            }
        });
        jPanel18.add(删除废都奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 580, -1, 30));

        刷新废都副本奖励.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        刷新废都副本奖励.setForeground(new java.awt.Color(255, 0, 51));
        刷新废都副本奖励.setText("刷新废都奖励");
        刷新废都副本奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                刷新废都副本奖励ActionPerformed(evt);
            }
        });
        jPanel18.add(刷新废都副本奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 160, 140, 50));

        废都最小人数.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最小人数"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane42.setViewportView(废都最小人数);

        jPanel18.add(jScrollPane42, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 80, 80, 50));

        废都最大人数.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最大人数"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane43.setViewportView(废都最大人数);

        jPanel18.add(jScrollPane43, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 140, 80, 50));

        废都最高等级.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最高等级"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane44.setViewportView(废都最高等级);

        jPanel18.add(jScrollPane44, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 260, 80, 50));

        废都最低等级.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最低等级"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane45.setViewportView(废都最低等级);

        jPanel18.add(jScrollPane45, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 200, 80, 50));
        jPanel18.add(废都1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 100, 70, 30));

        废都修改1.setText("修改");
        废都修改1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                废都修改1ActionPerformed(evt);
            }
        });
        jPanel18.add(废都修改1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 100, -1, 30));
        jPanel18.add(废都2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 160, 70, 30));

        废都修改2.setText("修改");
        废都修改2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                废都修改2ActionPerformed(evt);
            }
        });
        jPanel18.add(废都修改2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 160, -1, 30));
        jPanel18.add(废都3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 220, 70, 30));

        废都修改3.setText("修改");
        废都修改3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                废都修改3ActionPerformed(evt);
            }
        });
        jPanel18.add(废都修改3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 220, -1, 30));
        jPanel18.add(废都4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 280, 70, 30));

        废都修改4.setText("修改");
        废都修改4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                废都修改4ActionPerformed(evt);
            }
        });
        jPanel18.add(废都修改4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 280, -1, 30));

        刷新废都设置.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        刷新废都设置.setForeground(new java.awt.Color(255, 0, 51));
        刷新废都设置.setText("刷新废都设置");
        刷新废都设置.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                刷新废都设置ActionPerformed(evt);
            }
        });
        jPanel18.add(刷新废都设置, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 220, 140, 50));

        废都第一关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "第一关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        废都第一关经验.setColumnSelectionAllowed(true);
        jScrollPane46.setViewportView(废都第一关经验);

        jPanel18.add(jScrollPane46, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 320, 100, 50));
        jPanel18.add(废都5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 340, 70, 30));

        废都修改5.setText("修改");
        废都修改5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                废都修改5ActionPerformed(evt);
            }
        });
        jPanel18.add(废都修改5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 340, -1, 30));

        废都第2至4关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "第2-4关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane47.setViewportView(废都第2至4关经验);

        jPanel18.add(jScrollPane47, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 380, 100, 50));
        jPanel18.add(废都6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 400, 70, 30));

        废都修改6.setText("修改");
        废都修改6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                废都修改6ActionPerformed(evt);
            }
        });
        jPanel18.add(废都修改6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 400, -1, 30));

        废都通关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "通关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane48.setViewportView(废都通关经验);

        jPanel18.add(jScrollPane48, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 440, 100, 50));
        jPanel18.add(废都7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 460, 70, 30));

        废都修改7.setText("修改");
        废都修改7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                废都修改7ActionPerformed(evt);
            }
        });
        jPanel18.add(废都修改7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 460, -1, 30));

        废都通关金币.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "通关金币"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane49.setViewportView(废都通关金币);

        jPanel18.add(jScrollPane49, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 500, 100, 50));
        jPanel18.add(废都8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 520, 70, 30));

        废都修改8.setText("修改");
        废都修改8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                废都修改8ActionPerformed(evt);
            }
        });
        jPanel18.add(废都修改8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 520, -1, 30));

        jLabel70.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel70.setForeground(new java.awt.Color(255, 0, 153));
        jLabel70.setText("废都副本奖励以及设置；");
        jPanel18.add(jLabel70, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, -1, -1));

        jLabel207.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel207.setForeground(new java.awt.Color(204, 0, 0));
        jLabel207.setText("物品名；");
        jPanel18.add(jLabel207, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 500, -1, 20));

        jLabel208.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel208.setForeground(new java.awt.Color(204, 0, 0));
        jLabel208.setText("物品代码；");
        jPanel18.add(jLabel208, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 500, -1, 20));

        jLabel209.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel209.setForeground(new java.awt.Color(204, 0, 0));
        jLabel209.setText("下限；");
        jPanel18.add(jLabel209, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 500, 70, 20));

        jLabel210.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel210.setForeground(new java.awt.Color(204, 0, 0));
        jLabel210.setText("下限；");
        jPanel18.add(jLabel210, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 500, 70, 20));

        废都奖励名称.setEditable(false);
        jPanel18.add(废都奖励名称, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 520, 130, 30));

        jLabel211.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel211.setForeground(new java.awt.Color(204, 0, 0));
        jLabel211.setText("概率；");
        jPanel18.add(jLabel211, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 500, -1, 20));

        修改废都奖励.setText("修改");
        修改废都奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                修改废都奖励ActionPerformed(evt);
            }
        });
        jPanel18.add(修改废都奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 580, -1, 30));

        废都奖励序号.setEditable(false);
        jPanel18.add(废都奖励序号, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 520, 90, 30));

        jLabel212.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel212.setForeground(new java.awt.Color(204, 0, 0));
        jLabel212.setText("物品序号；");
        jPanel18.add(jLabel212, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 500, -1, 20));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "副本设置", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("黑体", 1, 18))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 308, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 490, Short.MAX_VALUE)
        );

        jPanel18.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 50, 320, 520));

        jTabbedPane3.addTab("废都副本", jPanel18);

        jPanel19.setBackground(new java.awt.Color(255, 255, 255));
        jPanel19.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        刷新玩具塔副本奖励.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        刷新玩具塔副本奖励.setForeground(new java.awt.Color(255, 0, 51));
        刷新玩具塔副本奖励.setText("刷新玩具塔奖励");
        刷新玩具塔副本奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                刷新玩具塔副本奖励ActionPerformed(evt);
            }
        });
        jPanel19.add(刷新玩具塔副本奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 440, 160, 50));

        jLabel77.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel77.setForeground(new java.awt.Color(255, 0, 153));
        jLabel77.setText("玩具塔奖励之地箱子物品");
        jPanel19.add(jLabel77, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 40, -1, 20));

        玩具塔最小人数.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最小人数"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane51.setViewportView(玩具塔最小人数);

        jPanel19.add(jScrollPane51, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 60, 70, 50));

        玩具塔最大人数.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最大人数"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane52.setViewportView(玩具塔最大人数);

        jPanel19.add(jScrollPane52, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 120, 70, 50));

        玩具塔最高等级.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最高等级"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane53.setViewportView(玩具塔最高等级);

        jPanel19.add(jScrollPane53, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 240, 70, 50));

        玩具塔最低等级.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最低等级"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane54.setViewportView(玩具塔最低等级);

        jPanel19.add(jScrollPane54, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 180, 70, 50));
        jPanel19.add(玩具塔1, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 80, 50, 30));

        玩具塔修改1.setText("修改");
        玩具塔修改1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                玩具塔修改1ActionPerformed(evt);
            }
        });
        jPanel19.add(玩具塔修改1, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 80, 50, 30));
        jPanel19.add(玩具塔2, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 140, 50, 30));

        玩具塔修改2.setText("修改");
        玩具塔修改2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                玩具塔修改2ActionPerformed(evt);
            }
        });
        jPanel19.add(玩具塔修改2, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 140, 50, 30));
        jPanel19.add(玩具塔3, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 200, 50, 30));

        玩具塔修改3.setText("修改");
        玩具塔修改3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                玩具塔修改3ActionPerformed(evt);
            }
        });
        jPanel19.add(玩具塔修改3, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 200, 50, 30));
        jPanel19.add(玩具塔4, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 260, 50, 30));

        玩具塔修改4.setText("修改");
        玩具塔修改4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                玩具塔修改4ActionPerformed(evt);
            }
        });
        jPanel19.add(玩具塔修改4, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 260, 50, 30));

        刷新玩具塔设置.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        刷新玩具塔设置.setForeground(new java.awt.Color(255, 0, 102));
        刷新玩具塔设置.setText("刷新玩具塔设置");
        刷新玩具塔设置.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                刷新玩具塔设置ActionPerformed(evt);
            }
        });
        jPanel19.add(刷新玩具塔设置, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 500, 160, 50));

        玩具塔第一关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "第一关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane55.setViewportView(玩具塔第一关经验);

        jPanel19.add(jScrollPane55, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 60, 80, 50));
        jPanel19.add(玩具塔5, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 80, 50, 30));

        玩具塔修改5.setText("修改");
        玩具塔修改5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                玩具塔修改5ActionPerformed(evt);
            }
        });
        jPanel19.add(玩具塔修改5, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 80, 50, 30));

        玩具塔第二关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "第二关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane56.setViewportView(玩具塔第二关经验);

        jPanel19.add(jScrollPane56, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 120, 80, 50));

        玩具塔第三关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "第三关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane57.setViewportView(玩具塔第三关经验);

        jPanel19.add(jScrollPane57, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 180, 80, 50));

        玩具塔第四关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "第四关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane58.setViewportView(玩具塔第四关经验);

        jPanel19.add(jScrollPane58, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 240, 80, 50));

        玩具塔第五关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "第五关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane59.setViewportView(玩具塔第五关经验);

        jPanel19.add(jScrollPane59, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 300, 80, 50));

        玩具塔第六关经验.setAutoCreateColumnsFromModel(false);
        玩具塔第六关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "第六关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane60.setViewportView(玩具塔第六关经验);

        jPanel19.add(jScrollPane60, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 360, 80, 50));

        玩具塔第七关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "第七关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane61.setViewportView(玩具塔第七关经验);

        jPanel19.add(jScrollPane61, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 420, 80, 50));

        玩具塔第八关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "第八关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane62.setViewportView(玩具塔第八关经验);

        jPanel19.add(jScrollPane62, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 480, 80, 50));

        玩具塔第九关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "第九关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane63.setViewportView(玩具塔第九关经验);

        jPanel19.add(jScrollPane63, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 540, 80, 50));
        jPanel19.add(玩具塔6, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 140, 50, 30));

        玩具塔修改6.setText("修改");
        玩具塔修改6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                玩具塔修改6ActionPerformed(evt);
            }
        });
        jPanel19.add(玩具塔修改6, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 140, 50, 30));
        jPanel19.add(玩具塔7, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 200, 50, 30));

        玩具塔修改7.setText("修改");
        玩具塔修改7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                玩具塔修改7ActionPerformed(evt);
            }
        });
        jPanel19.add(玩具塔修改7, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 200, 50, 30));
        jPanel19.add(玩具塔8, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 260, 50, 30));

        玩具塔修改8.setText("修改");
        玩具塔修改8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                玩具塔修改8ActionPerformed(evt);
            }
        });
        jPanel19.add(玩具塔修改8, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 260, 50, 30));
        jPanel19.add(玩具塔9, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 320, 50, 30));

        玩具塔修改9.setText("修改");
        玩具塔修改9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                玩具塔修改9ActionPerformed(evt);
            }
        });
        jPanel19.add(玩具塔修改9, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 320, 50, 30));

        玩具塔10.setEditable(false);
        jPanel19.add(玩具塔10, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 380, 50, 30));

        玩具塔修改10.setText("修改");
        玩具塔修改10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                玩具塔修改10ActionPerformed(evt);
            }
        });
        jPanel19.add(玩具塔修改10, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 380, 50, 30));
        jPanel19.add(玩具塔11, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 440, 50, 30));

        玩具塔修改11.setText("修改");
        玩具塔修改11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                玩具塔修改11ActionPerformed(evt);
            }
        });
        jPanel19.add(玩具塔修改11, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 440, 50, 30));
        jPanel19.add(玩具塔12, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 500, 50, 30));

        玩具塔修改12.setText("修改");
        玩具塔修改12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                玩具塔修改12ActionPerformed(evt);
            }
        });
        jPanel19.add(玩具塔修改12, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 500, 50, 30));
        jPanel19.add(玩具塔13, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 560, 50, 30));

        玩具塔修改13.setText("修改");
        玩具塔修改13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                玩具塔修改13ActionPerformed(evt);
            }
        });
        jPanel19.add(玩具塔修改13, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 560, 50, 30));

        玩具塔通关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "通关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane64.setViewportView(玩具塔通关经验);

        jPanel19.add(jScrollPane64, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 300, 90, 50));
        jPanel19.add(玩具塔14, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 320, 50, 30));

        玩具塔修改14.setText("修改");
        玩具塔修改14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                玩具塔修改14ActionPerformed(evt);
            }
        });
        jPanel19.add(玩具塔修改14, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 320, 50, 30));

        玩具塔通关金币.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "通关金币"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane65.setViewportView(玩具塔通关金币);

        jPanel19.add(jScrollPane65, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 360, 90, 50));
        jPanel19.add(玩具塔15, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 380, 50, 30));

        玩具塔修改15.setText("修改");
        玩具塔修改15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                玩具塔修改15ActionPerformed(evt);
            }
        });
        jPanel19.add(玩具塔修改15, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 380, 50, 30));

        玩具塔奖励箱子.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "物品", "概率", "物品名"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        玩具塔奖励箱子.setColumnSelectionAllowed(true);
        jScrollPane83.setViewportView(玩具塔奖励箱子);
        玩具塔奖励箱子.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (玩具塔奖励箱子.getColumnModel().getColumnCount() > 0) {
            玩具塔奖励箱子.getColumnModel().getColumn(0).setResizable(false);
            玩具塔奖励箱子.getColumnModel().getColumn(1).setResizable(false);
            玩具塔奖励箱子.getColumnModel().getColumn(1).setPreferredWidth(50);
            玩具塔奖励箱子.getColumnModel().getColumn(2).setResizable(false);
            玩具塔奖励箱子.getColumnModel().getColumn(2).setPreferredWidth(100);
        }

        jPanel19.add(jScrollPane83, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 70, 240, 300));

        jLabel106.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel106.setForeground(new java.awt.Color(255, 0, 153));
        jLabel106.setText("玩具塔副本奖励以及设置");
        jPanel19.add(jLabel106, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        刷新玩具塔箱子.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        刷新玩具塔箱子.setForeground(new java.awt.Color(255, 0, 102));
        刷新玩具塔箱子.setText("刷新玩具塔箱子");
        刷新玩具塔箱子.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                刷新玩具塔箱子ActionPerformed(evt);
            }
        });
        jPanel19.add(刷新玩具塔箱子, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 560, 160, 50));

        删除玩具箱子物品.setText("删除");
        删除玩具箱子物品.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                删除玩具箱子物品ActionPerformed(evt);
            }
        });
        jPanel19.add(删除玩具箱子物品, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 590, 70, 30));
        jPanel19.add(删除玩具箱子物品代码, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 590, 110, 30));

        新增玩具箱子物品.setText("新增");
        新增玩具箱子物品.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                新增玩具箱子物品ActionPerformed(evt);
            }
        });
        jPanel19.add(新增玩具箱子物品, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 460, 70, 80));
        jPanel19.add(增加玩具箱子物品, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 460, 110, 30));
        jPanel19.add(玩具箱子物品概率, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 510, 110, 30));

        挖矿序列号1.setEditable(false);
        jPanel19.add(挖矿序列号1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 400, 80, 30));

        jButton20.setText("取新序列号");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        jPanel19.add(jButton20, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 400, 110, 30));

        jLabel108.setText("物品代码");
        jPanel19.add(jLabel108, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 440, -1, -1));

        jLabel109.setText("概率");
        jPanel19.add(jLabel109, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 490, -1, -1));

        jLabel110.setText("物品代码");
        jPanel19.add(jLabel110, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 570, -1, -1));

        删除玩具箱子物品1.setText("重载");
        删除玩具箱子物品1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                删除玩具箱子物品1ActionPerformed(evt);
            }
        });
        jPanel19.add(删除玩具箱子物品1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 550, 70, 30));

        玩具塔副本奖励.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "序号", "代码", "随机下限", "随机上限", "获得概率", "物品名"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        玩具塔副本奖励.getTableHeader().setReorderingAllowed(false);
        jScrollPane81.setViewportView(玩具塔副本奖励);
        if (玩具塔副本奖励.getColumnModel().getColumnCount() > 0) {
            玩具塔副本奖励.getColumnModel().getColumn(0).setResizable(false);
            玩具塔副本奖励.getColumnModel().getColumn(1).setResizable(false);
            玩具塔副本奖励.getColumnModel().getColumn(1).setPreferredWidth(100);
            玩具塔副本奖励.getColumnModel().getColumn(2).setResizable(false);
            玩具塔副本奖励.getColumnModel().getColumn(3).setResizable(false);
            玩具塔副本奖励.getColumnModel().getColumn(4).setResizable(false);
            玩具塔副本奖励.getColumnModel().getColumn(5).setResizable(false);
            玩具塔副本奖励.getColumnModel().getColumn(5).setPreferredWidth(120);
        }

        jPanel19.add(jScrollPane81, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 540, 450));

        新增玩具塔奖励.setText("新增");
        新增玩具塔奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                新增玩具塔奖励ActionPerformed(evt);
            }
        });
        jPanel19.add(新增玩具塔奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 580, -1, 30));
        jPanel19.add(玩具塔奖励随机下限, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 520, 80, 30));
        jPanel19.add(玩具塔奖励随机上限, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 520, 80, 30));
        jPanel19.add(玩具塔奖励代码, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 520, 90, 30));
        jPanel19.add(玩具塔奖励获得概率, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 520, 70, 30));

        删除玩具塔奖励.setText("删除");
        删除玩具塔奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                删除玩具塔奖励ActionPerformed(evt);
            }
        });
        jPanel19.add(删除玩具塔奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 580, -1, 30));

        jLabel219.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel219.setForeground(new java.awt.Color(204, 0, 0));
        jLabel219.setText("物品名；");
        jPanel19.add(jLabel219, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 500, -1, 20));

        jLabel220.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel220.setForeground(new java.awt.Color(204, 0, 0));
        jLabel220.setText("物品代码；");
        jPanel19.add(jLabel220, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 500, -1, 20));

        jLabel221.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel221.setForeground(new java.awt.Color(204, 0, 0));
        jLabel221.setText("下限；");
        jPanel19.add(jLabel221, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 500, 70, 20));

        jLabel222.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel222.setForeground(new java.awt.Color(204, 0, 0));
        jLabel222.setText("下限；");
        jPanel19.add(jLabel222, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 500, 70, 20));

        玩具塔奖励名称.setEditable(false);
        jPanel19.add(玩具塔奖励名称, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 520, 130, 30));

        jLabel223.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel223.setForeground(new java.awt.Color(204, 0, 0));
        jLabel223.setText("概率；");
        jPanel19.add(jLabel223, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 500, -1, 20));

        修改玩具塔奖励.setText("修改");
        修改玩具塔奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                修改玩具塔奖励ActionPerformed(evt);
            }
        });
        jPanel19.add(修改玩具塔奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 580, -1, 30));

        玩具塔奖励序号.setEditable(false);
        jPanel19.add(玩具塔奖励序号, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 520, 90, 30));

        jLabel224.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel224.setForeground(new java.awt.Color(204, 0, 0));
        jLabel224.setText("物品序号；");
        jPanel19.add(jLabel224, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, -1, 20));

        jTabbedPane3.addTab("玩具塔副本", jPanel19);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        刷新海盗副本奖励.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        刷新海盗副本奖励.setForeground(new java.awt.Color(255, 0, 51));
        刷新海盗副本奖励.setText("刷新海盗奖励");
        刷新海盗副本奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                刷新海盗副本奖励ActionPerformed(evt);
            }
        });
        jPanel1.add(刷新海盗副本奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 200, 130, 50));

        jLabel103.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel103.setForeground(new java.awt.Color(255, 0, 153));
        jLabel103.setText("海盗副本奖励以及设置；");
        jPanel1.add(jLabel103, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        海盗最小人数.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最小人数"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane80.setViewportView(海盗最小人数);

        jPanel1.add(jScrollPane80, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 50, 80, 50));

        海盗最大人数.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最大人数"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane82.setViewportView(海盗最大人数);

        jPanel1.add(jScrollPane82, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 110, 80, 50));

        海盗最高等级.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最高等级"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane84.setViewportView(海盗最高等级);

        jPanel1.add(jScrollPane84, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 230, 80, 50));

        海盗最低等级.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最低等级"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane86.setViewportView(海盗最低等级);

        jPanel1.add(jScrollPane86, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 170, 80, 50));
        jPanel1.add(海盗最小人数代码, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 70, 70, 30));

        海盗1.setText("修改");
        海盗1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                海盗1ActionPerformed(evt);
            }
        });
        jPanel1.add(海盗1, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 70, -1, 30));
        jPanel1.add(海盗最大人数代码, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 130, 70, 30));

        海盗2.setText("修改");
        海盗2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                海盗2ActionPerformed(evt);
            }
        });
        jPanel1.add(海盗2, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 130, -1, 30));
        jPanel1.add(海盗最低等级代码, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 190, 70, 30));

        海盗3.setText("修改");
        海盗3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                海盗3ActionPerformed(evt);
            }
        });
        jPanel1.add(海盗3, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 190, -1, 30));
        jPanel1.add(海盗最高等级代码, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 250, 70, 30));

        海盗4.setText("修改");
        海盗4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                海盗4ActionPerformed(evt);
            }
        });
        jPanel1.add(海盗4, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 250, -1, 30));

        海盗通关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "通关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane87.setViewportView(海盗通关经验);

        jPanel1.add(jScrollPane87, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 290, 100, 50));

        海盗通关金币.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "通关金币"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane88.setViewportView(海盗通关金币);

        jPanel1.add(jScrollPane88, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 350, 100, 50));
        jPanel1.add(海盗通关经验代码, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 310, 70, 30));

        海盗5.setText("修改");
        海盗5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                海盗5ActionPerformed(evt);
            }
        });
        jPanel1.add(海盗5, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 310, -1, 30));
        jPanel1.add(海盗通关金币代码, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 370, 70, 30));

        海盗6.setText("修改");
        海盗6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                海盗6ActionPerformed(evt);
            }
        });
        jPanel1.add(海盗6, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 370, -1, 30));

        刷新海盗设置.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        刷新海盗设置.setForeground(new java.awt.Color(255, 0, 51));
        刷新海盗设置.setText("刷新海盗设置");
        刷新海盗设置.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                刷新海盗设置ActionPerformed(evt);
            }
        });
        jPanel1.add(刷新海盗设置, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 270, 130, 50));

        海盗副本奖励.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "序号", "代码", "随机下限", "随机上限", "获得概率", "物品名"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        海盗副本奖励.getTableHeader().setReorderingAllowed(false);
        jScrollPane100.setViewportView(海盗副本奖励);
        if (海盗副本奖励.getColumnModel().getColumnCount() > 0) {
            海盗副本奖励.getColumnModel().getColumn(0).setResizable(false);
            海盗副本奖励.getColumnModel().getColumn(1).setResizable(false);
            海盗副本奖励.getColumnModel().getColumn(1).setPreferredWidth(100);
            海盗副本奖励.getColumnModel().getColumn(2).setResizable(false);
            海盗副本奖励.getColumnModel().getColumn(3).setResizable(false);
            海盗副本奖励.getColumnModel().getColumn(4).setResizable(false);
            海盗副本奖励.getColumnModel().getColumn(5).setResizable(false);
            海盗副本奖励.getColumnModel().getColumn(5).setPreferredWidth(120);
        }

        jPanel1.add(jScrollPane100, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 540, 450));

        新增海盗奖励.setText("新增");
        新增海盗奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                新增海盗奖励ActionPerformed(evt);
            }
        });
        jPanel1.add(新增海盗奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 580, -1, 30));
        jPanel1.add(海盗奖励随机下限, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 520, 80, 30));
        jPanel1.add(海盗奖励随机上限, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 520, 80, 30));
        jPanel1.add(海盗奖励代码, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 520, 90, 30));
        jPanel1.add(海盗奖励获得概率, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 520, 70, 30));

        删除海盗奖励.setText("删除");
        删除海盗奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                删除海盗奖励ActionPerformed(evt);
            }
        });
        jPanel1.add(删除海盗奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 580, -1, 30));

        jLabel225.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel225.setForeground(new java.awt.Color(204, 0, 0));
        jLabel225.setText("物品名；");
        jPanel1.add(jLabel225, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 500, -1, 20));

        jLabel226.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel226.setForeground(new java.awt.Color(204, 0, 0));
        jLabel226.setText("物品代码；");
        jPanel1.add(jLabel226, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 500, -1, 20));

        jLabel227.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel227.setForeground(new java.awt.Color(204, 0, 0));
        jLabel227.setText("下限；");
        jPanel1.add(jLabel227, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 500, 70, 20));

        jLabel228.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel228.setForeground(new java.awt.Color(204, 0, 0));
        jLabel228.setText("下限；");
        jPanel1.add(jLabel228, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 500, 70, 20));

        海盗奖励名称.setEditable(false);
        jPanel1.add(海盗奖励名称, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 520, 130, 30));

        jLabel229.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel229.setForeground(new java.awt.Color(204, 0, 0));
        jLabel229.setText("概率；");
        jPanel1.add(jLabel229, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 500, -1, 20));

        修改海盗奖励.setText("修改");
        修改海盗奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                修改海盗奖励ActionPerformed(evt);
            }
        });
        jPanel1.add(修改海盗奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 580, -1, 30));

        海盗奖励序号.setEditable(false);
        jPanel1.add(海盗奖励序号, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 520, 90, 30));

        jLabel230.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel230.setForeground(new java.awt.Color(204, 0, 0));
        jLabel230.setText("物品序号；");
        jPanel1.add(jLabel230, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, -1, 20));

        jTabbedPane3.addTab("海盗副本", jPanel1);

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));
        jPanel14.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        刷新月妙副本奖励.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        刷新月妙副本奖励.setForeground(new java.awt.Color(255, 0, 51));
        刷新月妙副本奖励.setText("刷新月妙奖励");
        刷新月妙副本奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                刷新月妙副本奖励ActionPerformed(evt);
            }
        });
        jPanel14.add(刷新月妙副本奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 140, 140, 50));

        刷新最小人数.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最小人数"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane35.setViewportView(刷新最小人数);

        jPanel14.add(jScrollPane35, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 80, 80, 50));

        刷新月妙设置.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        刷新月妙设置.setForeground(new java.awt.Color(255, 0, 51));
        刷新月妙设置.setText("刷新月妙设置");
        刷新月妙设置.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                刷新月妙设置ActionPerformed(evt);
            }
        });
        jPanel14.add(刷新月妙设置, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 200, 140, 50));

        刷新最大人数.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最大人数"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane36.setViewportView(刷新最大人数);

        jPanel14.add(jScrollPane36, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 140, 80, 50));

        刷新最高等级.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最高等级"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane37.setViewportView(刷新最高等级);

        jPanel14.add(jScrollPane37, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 260, 80, 50));

        刷新最低等级.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最低等级"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane38.setViewportView(刷新最低等级);

        jPanel14.add(jScrollPane38, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 200, 80, 50));

        月妙通关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "通关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane39.setViewportView(月妙通关经验);

        jPanel14.add(jScrollPane39, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 320, 80, 50));
        jPanel14.add(月妙1, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 100, 70, 30));

        修改1.setText("修改");
        修改1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                修改1ActionPerformed(evt);
            }
        });
        jPanel14.add(修改1, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 100, -1, 30));
        jPanel14.add(月妙2, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 160, 70, 30));

        修改2.setText("修改");
        修改2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                修改2ActionPerformed(evt);
            }
        });
        jPanel14.add(修改2, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 160, -1, 30));
        jPanel14.add(月妙3, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 220, 70, 30));

        修改3.setText("修改");
        修改3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                修改3ActionPerformed(evt);
            }
        });
        jPanel14.add(修改3, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 220, -1, 30));
        jPanel14.add(月妙4, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 280, 70, 30));

        修改4.setText("修改");
        修改4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                修改4ActionPerformed(evt);
            }
        });
        jPanel14.add(修改4, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 280, -1, 30));
        jPanel14.add(月妙5, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 340, 70, 30));

        修改5.setText("修改");
        修改5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                修改5ActionPerformed(evt);
            }
        });
        jPanel14.add(修改5, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 340, -1, 30));

        月妙通关金币.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "通关金币"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        月妙通关金币.setColumnSelectionAllowed(true);
        jScrollPane40.setViewportView(月妙通关金币);

        jPanel14.add(jScrollPane40, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 380, 80, 50));
        jPanel14.add(月妙6, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 400, 70, 30));

        修改6.setText("修改");
        修改6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                修改6ActionPerformed(evt);
            }
        });
        jPanel14.add(修改6, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 400, -1, 30));

        jLabel69.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel69.setForeground(new java.awt.Color(255, 0, 153));
        jLabel69.setText("月妙副本奖励以及设置；");
        jPanel14.add(jLabel69, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        月妙副本奖励.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "序号", "代码", "随机下限", "随机上限", "获得概率", "物品名"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        月妙副本奖励.getTableHeader().setReorderingAllowed(false);
        jScrollPane101.setViewportView(月妙副本奖励);
        if (月妙副本奖励.getColumnModel().getColumnCount() > 0) {
            月妙副本奖励.getColumnModel().getColumn(0).setResizable(false);
            月妙副本奖励.getColumnModel().getColumn(1).setResizable(false);
            月妙副本奖励.getColumnModel().getColumn(1).setPreferredWidth(100);
            月妙副本奖励.getColumnModel().getColumn(2).setResizable(false);
            月妙副本奖励.getColumnModel().getColumn(3).setResizable(false);
            月妙副本奖励.getColumnModel().getColumn(4).setResizable(false);
            月妙副本奖励.getColumnModel().getColumn(5).setResizable(false);
            月妙副本奖励.getColumnModel().getColumn(5).setPreferredWidth(120);
        }

        jPanel14.add(jScrollPane101, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 540, 450));

        新增月妙奖励.setText("新增");
        新增月妙奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                新增月妙奖励ActionPerformed(evt);
            }
        });
        jPanel14.add(新增月妙奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 580, -1, 30));
        jPanel14.add(月妙奖励随机下限, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 520, 80, 30));
        jPanel14.add(月妙奖励随机上限, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 520, 80, 30));
        jPanel14.add(月妙奖励代码, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 520, 90, 30));
        jPanel14.add(月妙奖励获得概率, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 520, 70, 30));

        删除月妙奖励.setText("删除");
        删除月妙奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                删除月妙奖励ActionPerformed(evt);
            }
        });
        jPanel14.add(删除月妙奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 580, -1, 30));

        jLabel231.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel231.setForeground(new java.awt.Color(204, 0, 0));
        jLabel231.setText("物品名；");
        jPanel14.add(jLabel231, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 500, -1, 20));

        jLabel232.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel232.setForeground(new java.awt.Color(204, 0, 0));
        jLabel232.setText("物品代码；");
        jPanel14.add(jLabel232, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 500, -1, 20));

        jLabel233.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel233.setForeground(new java.awt.Color(204, 0, 0));
        jLabel233.setText("下限；");
        jPanel14.add(jLabel233, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 500, 70, 20));

        jLabel234.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel234.setForeground(new java.awt.Color(204, 0, 0));
        jLabel234.setText("下限；");
        jPanel14.add(jLabel234, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 500, 70, 20));

        月妙奖励名称.setEditable(false);
        jPanel14.add(月妙奖励名称, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 520, 130, 30));

        jLabel235.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel235.setForeground(new java.awt.Color(204, 0, 0));
        jLabel235.setText("概率；");
        jPanel14.add(jLabel235, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 500, -1, 20));

        修改月妙奖励.setText("修改");
        修改月妙奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                修改月妙奖励ActionPerformed(evt);
            }
        });
        jPanel14.add(修改月妙奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 580, -1, 30));

        月妙奖励序号.setEditable(false);
        jPanel14.add(月妙奖励序号, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 520, 90, 30));

        jLabel236.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel236.setForeground(new java.awt.Color(204, 0, 0));
        jLabel236.setText("物品序号；");
        jPanel14.add(jLabel236, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, -1, 20));

        jTabbedPane3.addTab("月妙副本", jPanel14);

        jPanel16.setBackground(new java.awt.Color(255, 255, 255));
        jPanel16.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel84.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel84.setForeground(new java.awt.Color(255, 0, 153));
        jLabel84.setText("女神塔副本奖励以及设置；");
        jPanel16.add(jLabel84, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        刷新女神塔副本奖励.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        刷新女神塔副本奖励.setForeground(new java.awt.Color(255, 0, 51));
        刷新女神塔副本奖励.setText("刷新女神塔奖励");
        刷新女神塔副本奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                刷新女神塔副本奖励ActionPerformed(evt);
            }
        });
        jPanel16.add(刷新女神塔副本奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 450, 160, 50));

        女神塔最小人数.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最小人数"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane67.setViewportView(女神塔最小人数);

        jPanel16.add(jScrollPane67, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 60, 70, 50));

        女神塔最大人数.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最大人数"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane68.setViewportView(女神塔最大人数);

        jPanel16.add(jScrollPane68, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 120, 70, 50));

        女神塔最高等级.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最高等级"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane69.setViewportView(女神塔最高等级);

        jPanel16.add(jScrollPane69, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 240, 70, 50));

        女神塔最低等级.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最低等级"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane70.setViewportView(女神塔最低等级);

        jPanel16.add(jScrollPane70, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 180, 70, 50));
        jPanel16.add(女神塔1, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 80, 50, 30));

        女神塔修改1.setText("修改");
        女神塔修改1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                女神塔修改1ActionPerformed(evt);
            }
        });
        jPanel16.add(女神塔修改1, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 80, 50, 30));
        jPanel16.add(女神塔2, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 140, 50, 30));

        女神塔修改2.setText("修改");
        女神塔修改2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                女神塔修改2ActionPerformed(evt);
            }
        });
        jPanel16.add(女神塔修改2, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 140, 50, 30));
        jPanel16.add(女神塔3, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 200, 50, 30));

        女神塔修改3.setText("修改");
        女神塔修改3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                女神塔修改3ActionPerformed(evt);
            }
        });
        jPanel16.add(女神塔修改3, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 200, 50, 30));
        jPanel16.add(女神塔4, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 260, 50, 30));

        女神塔修改4.setText("修改");
        女神塔修改4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                女神塔修改4ActionPerformed(evt);
            }
        });
        jPanel16.add(女神塔修改4, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 260, 50, 30));

        刷新女神塔设置.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        刷新女神塔设置.setForeground(new java.awt.Color(255, 0, 51));
        刷新女神塔设置.setText("刷新女神塔设置");
        刷新女神塔设置.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                刷新女神塔设置ActionPerformed(evt);
            }
        });
        jPanel16.add(刷新女神塔设置, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 510, 160, 50));

        女神塔第一关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "第一关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        女神塔第一关经验.setColumnSelectionAllowed(true);
        jScrollPane71.setViewportView(女神塔第一关经验);

        jPanel16.add(jScrollPane71, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 60, 80, 50));

        女神塔仓库经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "仓库经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane72.setViewportView(女神塔仓库经验);

        jPanel16.add(jScrollPane72, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 120, 80, 50));

        女神塔休息室经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "休息室经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane73.setViewportView(女神塔休息室经验);

        jPanel16.add(jScrollPane73, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 180, 80, 50));

        女神塔大厅经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "大厅经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane74.setViewportView(女神塔大厅经验);

        jPanel16.add(jScrollPane74, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 300, 80, 50));

        女神塔封印室经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "封印室经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane75.setViewportView(女神塔封印室经验);

        jPanel16.add(jScrollPane75, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 240, 80, 50));

        女神塔散步路经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "散步路经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane76.setViewportView(女神塔散步路经验);

        jPanel16.add(jScrollPane76, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 360, 80, 50));

        女神塔通道经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "通道经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane77.setViewportView(女神塔通道经验);

        jPanel16.add(jScrollPane77, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 420, 80, 50));
        jPanel16.add(女神塔5, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 80, 50, 30));

        女神塔修改5.setText("修改");
        女神塔修改5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                女神塔修改5ActionPerformed(evt);
            }
        });
        jPanel16.add(女神塔修改5, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 80, 50, 30));
        jPanel16.add(女神塔6, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 140, 50, 30));

        女神塔修改6.setText("修改");
        女神塔修改6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                女神塔修改6ActionPerformed(evt);
            }
        });
        jPanel16.add(女神塔修改6, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 140, 50, 30));
        jPanel16.add(女神塔7, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 200, 50, 30));

        女神塔修改7.setText("修改");
        女神塔修改7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                女神塔修改7ActionPerformed(evt);
            }
        });
        jPanel16.add(女神塔修改7, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 200, 50, 30));
        jPanel16.add(女神塔8, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 260, 50, 30));

        女神塔修改8.setText("修改");
        女神塔修改8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                女神塔修改8ActionPerformed(evt);
            }
        });
        jPanel16.add(女神塔修改8, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 260, 50, 30));
        jPanel16.add(女神塔9, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 320, 50, 30));

        女神塔修改9.setText("修改");
        女神塔修改9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                女神塔修改9ActionPerformed(evt);
            }
        });
        jPanel16.add(女神塔修改9, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 320, 50, 30));
        jPanel16.add(女神塔10, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 380, 50, 30));

        女神塔修改10.setText("修改");
        女神塔修改10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                女神塔修改10ActionPerformed(evt);
            }
        });
        jPanel16.add(女神塔修改10, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 380, 50, 30));
        jPanel16.add(女神塔11, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 440, 50, 30));

        女神塔修改11.setText("修改");
        女神塔修改11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                女神塔修改11ActionPerformed(evt);
            }
        });
        jPanel16.add(女神塔修改11, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 440, 50, 30));

        女神塔通关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "通关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane78.setViewportView(女神塔通关经验);

        jPanel16.add(jScrollPane78, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 300, 90, 50));

        女神塔通关金币.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "通关金币"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane79.setViewportView(女神塔通关金币);

        jPanel16.add(jScrollPane79, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 360, 90, 50));
        jPanel16.add(女神塔12, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 320, 50, 30));

        女神塔修改12.setText("修改");
        女神塔修改12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                女神塔修改12ActionPerformed(evt);
            }
        });
        jPanel16.add(女神塔修改12, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 320, 50, 30));
        jPanel16.add(女神塔13, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 380, 50, 30));

        女神塔修改13.setText("修改");
        女神塔修改13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                女神塔修改13ActionPerformed(evt);
            }
        });
        jPanel16.add(女神塔修改13, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 380, 50, 30));

        jLabel107.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel107.setForeground(new java.awt.Color(255, 0, 153));
        jLabel107.setText("女神塔宝物仓库箱子物品");
        jPanel16.add(jLabel107, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 40, -1, 20));

        女神塔奖励箱子.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "   物品", "概率", "物品名"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane85.setViewportView(女神塔奖励箱子);
        if (女神塔奖励箱子.getColumnModel().getColumnCount() > 0) {
            女神塔奖励箱子.getColumnModel().getColumn(1).setPreferredWidth(50);
        }

        jPanel16.add(jScrollPane85, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 70, 240, 300));

        删除女神箱子物品.setText("删除");
        删除女神箱子物品.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                删除女神箱子物品ActionPerformed(evt);
            }
        });
        jPanel16.add(删除女神箱子物品, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 590, 70, 30));
        jPanel16.add(删除女神箱子物品代码, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 590, 110, 30));

        新增玩具箱子物品1.setText("新增");
        新增玩具箱子物品1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                新增玩具箱子物品1ActionPerformed(evt);
            }
        });
        jPanel16.add(新增玩具箱子物品1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 460, 70, 80));
        jPanel16.add(增加女神箱子物品, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 460, 110, 30));
        jPanel16.add(女神箱子物品概率, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 510, 110, 30));

        挖矿序列号2.setEditable(false);
        jPanel16.add(挖矿序列号2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 400, 80, 30));

        jButton21.setText("取新序列号");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });
        jPanel16.add(jButton21, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 400, 110, 30));

        jLabel111.setText("物品代码");
        jPanel16.add(jLabel111, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 440, -1, -1));

        jLabel112.setText("概率");
        jPanel16.add(jLabel112, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 490, -1, -1));

        jLabel120.setText("物品代码");
        jPanel16.add(jLabel120, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 570, -1, -1));

        删除玩具箱子物品3.setText("重载");
        删除玩具箱子物品3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                删除玩具箱子物品3ActionPerformed(evt);
            }
        });
        jPanel16.add(删除玩具箱子物品3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 550, 70, 30));

        刷新女神塔设置1.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        刷新女神塔设置1.setForeground(new java.awt.Color(255, 0, 51));
        刷新女神塔设置1.setText("刷新女神塔箱子");
        刷新女神塔设置1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                刷新女神塔设置1ActionPerformed(evt);
            }
        });
        jPanel16.add(刷新女神塔设置1, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 570, 160, 50));

        女神塔副本奖励.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "序号", "代码", "随机下限", "随机上限", "获得概率", "物品名"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        女神塔副本奖励.getTableHeader().setReorderingAllowed(false);
        jScrollPane102.setViewportView(女神塔副本奖励);
        if (女神塔副本奖励.getColumnModel().getColumnCount() > 0) {
            女神塔副本奖励.getColumnModel().getColumn(0).setResizable(false);
            女神塔副本奖励.getColumnModel().getColumn(1).setResizable(false);
            女神塔副本奖励.getColumnModel().getColumn(1).setPreferredWidth(100);
            女神塔副本奖励.getColumnModel().getColumn(2).setResizable(false);
            女神塔副本奖励.getColumnModel().getColumn(3).setResizable(false);
            女神塔副本奖励.getColumnModel().getColumn(4).setResizable(false);
            女神塔副本奖励.getColumnModel().getColumn(5).setResizable(false);
            女神塔副本奖励.getColumnModel().getColumn(5).setPreferredWidth(120);
        }

        jPanel16.add(jScrollPane102, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 540, 450));

        新增女神塔奖励.setText("新增");
        新增女神塔奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                新增女神塔奖励ActionPerformed(evt);
            }
        });
        jPanel16.add(新增女神塔奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 580, -1, 30));
        jPanel16.add(女神塔奖励随机下限, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 520, 80, 30));
        jPanel16.add(女神塔奖励随机上限, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 520, 80, 30));
        jPanel16.add(女神塔奖励代码, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 520, 90, 30));
        jPanel16.add(女神塔奖励获得概率, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 520, 70, 30));

        删除女神塔奖励.setText("删除");
        删除女神塔奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                删除女神塔奖励ActionPerformed(evt);
            }
        });
        jPanel16.add(删除女神塔奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 580, -1, 30));

        jLabel237.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel237.setForeground(new java.awt.Color(204, 0, 0));
        jLabel237.setText("物品名；");
        jPanel16.add(jLabel237, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 500, -1, 20));

        jLabel238.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel238.setForeground(new java.awt.Color(204, 0, 0));
        jLabel238.setText("物品代码；");
        jPanel16.add(jLabel238, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 500, -1, 20));

        jLabel239.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel239.setForeground(new java.awt.Color(204, 0, 0));
        jLabel239.setText("下限；");
        jPanel16.add(jLabel239, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 500, 70, 20));

        jLabel240.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel240.setForeground(new java.awt.Color(204, 0, 0));
        jLabel240.setText("下限；");
        jPanel16.add(jLabel240, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 500, 70, 20));

        女神塔奖励名称.setEditable(false);
        jPanel16.add(女神塔奖励名称, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 520, 130, 30));

        jLabel241.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel241.setForeground(new java.awt.Color(204, 0, 0));
        jLabel241.setText("概率；");
        jPanel16.add(jLabel241, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 500, -1, 20));

        修改女神塔奖励.setText("修改");
        修改女神塔奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                修改女神塔奖励ActionPerformed(evt);
            }
        });
        jPanel16.add(修改女神塔奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 580, -1, 30));

        女神塔奖励序号.setEditable(false);
        jPanel16.add(女神塔奖励序号, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 520, 90, 30));

        jLabel242.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel242.setForeground(new java.awt.Color(204, 0, 0));
        jLabel242.setText("物品序号；");
        jPanel16.add(jLabel242, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, -1, 20));

        jTabbedPane3.addTab("女神塔副本", jPanel16);

        毒雾森林.setBackground(new java.awt.Color(255, 255, 255));
        毒雾森林.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        刷新月妙副本奖励1.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        刷新月妙副本奖励1.setForeground(new java.awt.Color(255, 0, 51));
        刷新月妙副本奖励1.setText("刷新毒雾奖励");
        刷新月妙副本奖励1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                刷新月妙副本奖励1ActionPerformed(evt);
            }
        });
        毒雾森林.add(刷新月妙副本奖励1, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 160, 140, 50));

        毒雾森林最小人数.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最小人数"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane89.setViewportView(毒雾森林最小人数);

        毒雾森林.add(jScrollPane89, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 70, 80, 50));

        刷新毒雾森林设置.setFont(new java.awt.Font("宋体", 1, 15)); // NOI18N
        刷新毒雾森林设置.setForeground(new java.awt.Color(255, 0, 51));
        刷新毒雾森林设置.setText("刷新毒雾设置");
        刷新毒雾森林设置.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                刷新毒雾森林设置ActionPerformed(evt);
            }
        });
        毒雾森林.add(刷新毒雾森林设置, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 230, 140, 50));

        毒雾森林最大人数.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最大人数"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane90.setViewportView(毒雾森林最大人数);

        毒雾森林.add(jScrollPane90, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 130, 80, 50));

        毒雾森林最高等级.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最高等级"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane91.setViewportView(毒雾森林最高等级);

        毒雾森林.add(jScrollPane91, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 250, 80, 50));

        毒雾森林最低等级.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "最低等级"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane92.setViewportView(毒雾森林最低等级);

        毒雾森林.add(jScrollPane92, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 190, 80, 50));

        毒雾森林通关经验.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "通关经验"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane93.setViewportView(毒雾森林通关经验);

        毒雾森林.add(jScrollPane93, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 310, 80, 50));
        毒雾森林.add(毒雾森林1, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 90, 70, 30));

        毒雾森林10.setText("修改");
        毒雾森林10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                毒雾森林10ActionPerformed(evt);
            }
        });
        毒雾森林.add(毒雾森林10, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 90, -1, 30));
        毒雾森林.add(毒雾森林2, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 150, 70, 30));

        毒雾森林20.setText("修改");
        毒雾森林20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                毒雾森林20ActionPerformed(evt);
            }
        });
        毒雾森林.add(毒雾森林20, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 150, -1, 30));
        毒雾森林.add(毒雾森林3, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 210, 70, 30));

        毒雾森林30.setText("修改");
        毒雾森林30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                毒雾森林30ActionPerformed(evt);
            }
        });
        毒雾森林.add(毒雾森林30, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 210, -1, 30));
        毒雾森林.add(毒雾森林4, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 270, 70, 30));

        毒雾森林40.setText("修改");
        毒雾森林40.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                毒雾森林40ActionPerformed(evt);
            }
        });
        毒雾森林.add(毒雾森林40, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 270, -1, 30));
        毒雾森林.add(毒雾森林5, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 330, 70, 30));

        毒雾森林50.setText("修改");
        毒雾森林50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                毒雾森林50ActionPerformed(evt);
            }
        });
        毒雾森林.add(毒雾森林50, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 330, -1, 30));

        毒雾森林通关金币.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "通关金币"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        毒雾森林通关金币.setColumnSelectionAllowed(true);
        jScrollPane94.setViewportView(毒雾森林通关金币);

        毒雾森林.add(jScrollPane94, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 370, 80, 50));
        毒雾森林.add(毒雾森林6, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 390, 70, 30));

        毒雾森林60.setText("修改");
        毒雾森林60.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                毒雾森林60ActionPerformed(evt);
            }
        });
        毒雾森林.add(毒雾森林60, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 390, -1, 30));

        jLabel118.setFont(new java.awt.Font("宋体", 1, 18)); // NOI18N
        jLabel118.setForeground(new java.awt.Color(255, 0, 153));
        jLabel118.setText("毒雾森林副本奖励以及设置；");
        毒雾森林.add(jLabel118, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        毒雾副本奖励.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "序号", "代码", "随机下限", "随机上限", "获得概率", "物品名"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        毒雾副本奖励.getTableHeader().setReorderingAllowed(false);
        jScrollPane103.setViewportView(毒雾副本奖励);
        if (毒雾副本奖励.getColumnModel().getColumnCount() > 0) {
            毒雾副本奖励.getColumnModel().getColumn(0).setResizable(false);
            毒雾副本奖励.getColumnModel().getColumn(1).setResizable(false);
            毒雾副本奖励.getColumnModel().getColumn(1).setPreferredWidth(100);
            毒雾副本奖励.getColumnModel().getColumn(2).setResizable(false);
            毒雾副本奖励.getColumnModel().getColumn(3).setResizable(false);
            毒雾副本奖励.getColumnModel().getColumn(4).setResizable(false);
            毒雾副本奖励.getColumnModel().getColumn(5).setResizable(false);
            毒雾副本奖励.getColumnModel().getColumn(5).setPreferredWidth(120);
        }

        毒雾森林.add(jScrollPane103, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 540, 450));

        新增毒雾奖励.setText("新增");
        新增毒雾奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                新增毒雾奖励ActionPerformed(evt);
            }
        });
        毒雾森林.add(新增毒雾奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 580, -1, 30));
        毒雾森林.add(毒雾奖励随机下限, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 520, 80, 30));
        毒雾森林.add(毒雾奖励随机上限, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 520, 80, 30));
        毒雾森林.add(毒雾奖励代码, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 520, 90, 30));
        毒雾森林.add(毒雾奖励获得概率, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 520, 70, 30));

        删除毒雾奖励.setText("删除");
        删除毒雾奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                删除毒雾奖励ActionPerformed(evt);
            }
        });
        毒雾森林.add(删除毒雾奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 580, -1, 30));

        jLabel243.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel243.setForeground(new java.awt.Color(204, 0, 0));
        jLabel243.setText("物品名；");
        毒雾森林.add(jLabel243, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 500, -1, 20));

        jLabel244.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel244.setForeground(new java.awt.Color(204, 0, 0));
        jLabel244.setText("物品代码；");
        毒雾森林.add(jLabel244, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 500, -1, 20));

        jLabel245.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel245.setForeground(new java.awt.Color(204, 0, 0));
        jLabel245.setText("下限；");
        毒雾森林.add(jLabel245, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 500, 70, 20));

        jLabel246.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel246.setForeground(new java.awt.Color(204, 0, 0));
        jLabel246.setText("下限；");
        毒雾森林.add(jLabel246, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 500, 70, 20));

        毒雾奖励名称.setEditable(false);
        毒雾森林.add(毒雾奖励名称, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 520, 130, 30));

        jLabel247.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel247.setForeground(new java.awt.Color(204, 0, 0));
        jLabel247.setText("概率；");
        毒雾森林.add(jLabel247, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 500, -1, 20));

        修改毒雾奖励.setText("修改");
        修改毒雾奖励.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                修改毒雾奖励ActionPerformed(evt);
            }
        });
        毒雾森林.add(修改毒雾奖励, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 580, -1, 30));

        毒雾奖励序号.setEditable(false);
        毒雾森林.add(毒雾奖励序号, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 520, 90, 30));

        jLabel248.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel248.setForeground(new java.awt.Color(204, 0, 0));
        jLabel248.setText("物品序号；");
        毒雾森林.add(jLabel248, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, -1, 20));

        jTabbedPane3.addTab("毒雾森林副本", 毒雾森林);

        javax.swing.GroupLayout 罗密欧Layout = new javax.swing.GroupLayout(罗密欧);
        罗密欧.setLayout(罗密欧Layout);
        罗密欧Layout.setHorizontalGroup(
            罗密欧Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1255, Short.MAX_VALUE)
        );
        罗密欧Layout.setVerticalGroup(
            罗密欧Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 645, Short.MAX_VALUE)
        );

        jTabbedPane3.addTab("罗密欧与朱丽叶", 罗密欧);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1260, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void 刷新女神塔设置1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_刷新女神塔设置1ActionPerformed
        刷新女神塔箱子();         // TODO add your handling code here:
    }//GEN-LAST:event_刷新女神塔设置1ActionPerformed

    private void 删除玩具箱子物品3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_删除玩具箱子物品3ActionPerformed
        ReactorScriptManager.getInstance().clearDrops();

        JOptionPane.showMessageDialog(null, "重载成功。");            // TODO add your handling code here:
    }//GEN-LAST:event_删除玩具箱子物品3ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = con.prepareStatement("SELECT `reactordropid` FROM reactordrops ORDER BY `reactordropid` DESC LIMIT 1");
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    String SN = rs.getString("reactordropid");
                    int sns = Integer.parseInt(SN);
                    sns++;
                    挖矿序列号2.setText("" + sns);

                }
            }
            ps.close();
        } catch (SQLException ex) {
            System.err.println("出错：" + ex.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton21ActionPerformed

    private void 新增玩具箱子物品1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_新增玩具箱子物品1ActionPerformed
        boolean result1 = this.增加女神箱子物品.getText().matches("[0-9]+");
        boolean result2 = this.女神箱子物品概率.getText().matches("[0-9]+");

        if (result1 && result2) {
            if (Integer.parseInt(this.增加女神箱子物品.getText()) < 0 && Integer.parseInt(this.女神箱子物品概率.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO reactordrops (reactordropid, reactorid ,itemid ,chance ,questid ) VALUES (?, ?, ?, ?, ?)")) {
                ps.setInt(1, Integer.parseInt(this.挖矿序列号2.getText()));
                ps.setInt(2, 2002014);
                ps.setInt(3, Integer.parseInt(this.增加女神箱子物品.getText()));
                ps.setInt(4, Integer.parseInt(this.女神箱子物品概率.getText()));
                ps.setInt(5, -1);

                // ps.setString(9, 游戏商品备注.getText());
                ps.executeUpdate();
                // ps.execute();
                //ps.close();
                刷新女神塔箱子();
                JOptionPane.showMessageDialog(null, "成功增加物品,重载后生效。");

                //for (int i = ((DefaultTableModel) (this.游戏商店2.getModel())).getRowCount() - 1; i >= 0; i--) {
                //((DefaultTableModel) (this.游戏商店2.getModel())).removeRow(i);
                //  }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_新增玩具箱子物品1ActionPerformed

    private void 删除女神箱子物品ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_删除女神箱子物品ActionPerformed
        PreparedStatement ps1 = null;
        ResultSet rs = null;
        boolean result1 = this.删除女神箱子物品代码.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.删除女神箱子物品代码.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            try {

                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM reactordrops WHERE itemid = ?");
                ps1.setInt(1, Integer.parseInt(this.删除女神箱子物品代码.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from reactordrops where itemid =" + Integer.parseInt(this.删除女神箱子物品代码.getText()) + "";
                    ps1.executeUpdate(sqlstr);
                    刷新女神塔箱子();
                } else {

                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入数字 ");
        }         // TODO add your handling code here:
    }//GEN-LAST:event_删除女神箱子物品ActionPerformed

    private void 女神塔修改13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_女神塔修改13ActionPerformed
        boolean result1 = this.女神塔13.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.女神塔13.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z女神塔 WHERE id = ?");
                ps1.setInt(1, 13);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z女神塔 where id =13";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z女神塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 13);
                ps.setString(2, "女神通关金币");
                ps.setInt(3, Integer.parseInt(this.女神塔13.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新女神塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }               // TODO add your handling code here:
    }//GEN-LAST:event_女神塔修改13ActionPerformed

    private void 女神塔修改12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_女神塔修改12ActionPerformed
        boolean result1 = this.女神塔12.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.女神塔12.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z女神塔 WHERE id = ?");
                ps1.setInt(1, 12);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z女神塔 where id =12";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z女神塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 12);
                ps.setString(2, "女神通关经验");
                ps.setInt(3, Integer.parseInt(this.女神塔12.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新女神塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }         // TODO add your handling code here:
    }//GEN-LAST:event_女神塔修改12ActionPerformed

    private void 女神塔修改11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_女神塔修改11ActionPerformed
        boolean result1 = this.女神塔11.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.女神塔11.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z女神塔 WHERE id = ?");
                ps1.setInt(1, 11);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z女神塔 where id =11";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z女神塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 11);
                ps.setString(2, "女神塔通道经验");
                ps.setInt(3, Integer.parseInt(this.女神塔11.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新女神塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }       // TODO add your handling code here:
    }//GEN-LAST:event_女神塔修改11ActionPerformed

    private void 女神塔修改10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_女神塔修改10ActionPerformed
        boolean result1 = this.女神塔10.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.女神塔10.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z女神塔 WHERE id = ?");
                ps1.setInt(1, 10);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z女神塔 where id =10";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z女神塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 10);
                ps.setString(2, "女神塔散步路经验");
                ps.setInt(3, Integer.parseInt(this.女神塔10.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新女神塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }         // TODO add your handling code here:
    }//GEN-LAST:event_女神塔修改10ActionPerformed

    private void 女神塔修改9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_女神塔修改9ActionPerformed
        boolean result1 = this.女神塔9.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.女神塔9.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z女神塔 WHERE id = ?");
                ps1.setInt(1, 9);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z女神塔 where id =9";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z女神塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 9);
                ps.setString(2, "女神塔大厅经验");
                ps.setInt(3, Integer.parseInt(this.女神塔9.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新女神塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_女神塔修改9ActionPerformed

    private void 女神塔修改8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_女神塔修改8ActionPerformed
        boolean result1 = this.女神塔8.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.女神塔8.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z女神塔 WHERE id = ?");
                ps1.setInt(1, 8);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z女神塔 where id =8";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z女神塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 8);
                ps.setString(2, "女神塔封印室经验");
                ps.setInt(3, Integer.parseInt(this.女神塔8.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新女神塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }           // TODO add your handling code here:
    }//GEN-LAST:event_女神塔修改8ActionPerformed

    private void 女神塔修改7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_女神塔修改7ActionPerformed
        boolean result1 = this.女神塔7.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.女神塔7.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z女神塔 WHERE id = ?");
                ps1.setInt(1, 7);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z女神塔 where id =7";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z女神塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 7);
                ps.setString(2, "女神塔休息室经验");
                ps.setInt(3, Integer.parseInt(this.女神塔7.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新女神塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_女神塔修改7ActionPerformed

    private void 女神塔修改6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_女神塔修改6ActionPerformed
        boolean result1 = this.女神塔6.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.女神塔6.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z女神塔 WHERE id = ?");
                ps1.setInt(1, 6);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z女神塔 where id =6";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z女神塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 6);
                ps.setString(2, "女神塔仓库经验");
                ps.setInt(3, Integer.parseInt(this.女神塔6.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新女神塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }         // TODO add your handling code here:
    }//GEN-LAST:event_女神塔修改6ActionPerformed

    private void 女神塔修改5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_女神塔修改5ActionPerformed
        boolean result1 = this.女神塔5.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.女神塔5.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z女神塔 WHERE id = ?");
                ps1.setInt(1, 5);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z女神塔 where id =5";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z女神塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 5);
                ps.setString(2, "女神塔第一关经验");
                ps.setInt(3, Integer.parseInt(this.女神塔5.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新女神塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }          // TODO add your handling code here:
    }//GEN-LAST:event_女神塔修改5ActionPerformed

    private void 刷新女神塔设置ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_刷新女神塔设置ActionPerformed
        刷新女神塔设置();        // TODO add your handling code here:
    }//GEN-LAST:event_刷新女神塔设置ActionPerformed

    private void 女神塔修改4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_女神塔修改4ActionPerformed
        boolean result1 = this.女神塔4.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.女神塔4.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z女神塔 WHERE id = ?");
                ps1.setInt(1, 4);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z女神塔 where id =4";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z女神塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 4);
                ps.setString(2, "女神副本最高等级");
                ps.setInt(3, Integer.parseInt(this.女神塔4.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新女神塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }           // TODO add your handling code here:
    }//GEN-LAST:event_女神塔修改4ActionPerformed

    private void 女神塔修改3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_女神塔修改3ActionPerformed
        boolean result1 = this.女神塔3.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.女神塔3.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z女神塔 WHERE id = ?");
                ps1.setInt(1, 3);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z女神塔 where id =3";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z女神塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 3);
                ps.setString(2, "女神副本最低等级");
                ps.setInt(3, Integer.parseInt(this.女神塔3.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新女神塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_女神塔修改3ActionPerformed

    private void 女神塔修改2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_女神塔修改2ActionPerformed
        boolean result1 = this.女神塔2.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.女神塔2.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z女神塔 WHERE id = ?");
                ps1.setInt(1, 2);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z女神塔 where id =2";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z女神塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 2);
                ps.setString(2, "女神副本最大人数");
                ps.setInt(3, Integer.parseInt(this.女神塔2.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新女神塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }            // TODO add your handling code here:
    }//GEN-LAST:event_女神塔修改2ActionPerformed

    private void 女神塔修改1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_女神塔修改1ActionPerformed
        boolean result1 = this.女神塔1.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.女神塔1.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z女神塔 WHERE id = ?");
                ps1.setInt(1, 1);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z女神塔 where id =1";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z女神塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 1);
                ps.setString(2, "女神副本最小人数");
                ps.setInt(3, Integer.parseInt(this.女神塔1.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新女神塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_女神塔修改1ActionPerformed

    private void 刷新女神塔副本奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_刷新女神塔副本奖励ActionPerformed
        刷新女神塔奖励();        // TODO add your handling code here:
    }//GEN-LAST:event_刷新女神塔副本奖励ActionPerformed

    private void 删除玩具箱子物品1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_删除玩具箱子物品1ActionPerformed
        ReactorScriptManager.getInstance().clearDrops();

        JOptionPane.showMessageDialog(null, "重载成功。");            // TODO add your handling code here:
    }//GEN-LAST:event_删除玩具箱子物品1ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = con.prepareStatement("SELECT `reactordropid` FROM reactordrops ORDER BY `reactordropid` DESC LIMIT 1");
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    String SN = rs.getString("reactordropid");
                    int sns = Integer.parseInt(SN);
                    sns++;
                    挖矿序列号1.setText("" + sns);

                }
            }
            ps.close();
        } catch (SQLException ex) {
            System.err.println("出错：" + ex.getMessage());
        }         // TODO add your handling code here:
    }//GEN-LAST:event_jButton20ActionPerformed

    private void 新增玩具箱子物品ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_新增玩具箱子物品ActionPerformed
        boolean result1 = this.增加玩具箱子物品.getText().matches("[0-9]+");
        boolean result2 = this.玩具箱子物品概率.getText().matches("[0-9]+");

        if (result1 && result2) {
            if (Integer.parseInt(this.增加玩具箱子物品.getText()) < 0 && Integer.parseInt(this.玩具箱子物品概率.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO reactordrops (reactordropid, reactorid ,itemid ,chance ,questid ) VALUES (?, ?, ?, ?, ?)")) {
                ps.setInt(1, Integer.parseInt(this.挖矿序列号1.getText()));
                ps.setInt(2, 2202004);
                ps.setInt(3, Integer.parseInt(this.增加玩具箱子物品.getText()));
                ps.setInt(4, Integer.parseInt(this.玩具箱子物品概率.getText()));
                ps.setInt(5, -1);

                // ps.setString(9, 游戏商品备注.getText());
                ps.executeUpdate();
                // ps.execute();
                //ps.close();
                刷新玩具塔箱子();
                JOptionPane.showMessageDialog(null, "成功增加物品,重载后生效。");

                //for (int i = ((DefaultTableModel) (this.游戏商店2.getModel())).getRowCount() - 1; i >= 0; i--) {
                //((DefaultTableModel) (this.游戏商店2.getModel())).removeRow(i);
                //  }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入数字 ");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_新增玩具箱子物品ActionPerformed

    private void 删除玩具箱子物品ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_删除玩具箱子物品ActionPerformed
        PreparedStatement ps1 = null;
        ResultSet rs = null;
        boolean result1 = this.删除玩具箱子物品代码.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.删除玩具箱子物品代码.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            try {
                //清楚table数据
                for (int i = ((DefaultTableModel) (this.玩具塔奖励箱子.getModel())).getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) (this.玩具塔奖励箱子.getModel())).removeRow(i);
                }
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM reactordrops WHERE itemid = ?");
                ps1.setInt(1, Integer.parseInt(this.删除玩具箱子物品代码.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from reactordrops where itemid =" + Integer.parseInt(this.删除玩具箱子物品代码.getText()) + "";
                    ps1.executeUpdate(sqlstr);
                    刷新玩具塔箱子();
                } else {

                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入数字 ");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_删除玩具箱子物品ActionPerformed

    private void 刷新玩具塔箱子ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_刷新玩具塔箱子ActionPerformed
        刷新玩具塔箱子();            // TODO add your handling code here:
    }//GEN-LAST:event_刷新玩具塔箱子ActionPerformed

    private void 玩具塔修改15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_玩具塔修改15ActionPerformed
        boolean result1 = this.玩具塔15.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.玩具塔15.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z玩具塔 WHERE id = ?");
                ps1.setInt(1, 15);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z玩具塔 where id =15";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z玩具塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 15);
                ps.setString(2, "玩具通关金币");
                ps.setInt(3, Integer.parseInt(this.玩具塔15.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新玩具塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_玩具塔修改15ActionPerformed

    private void 玩具塔修改14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_玩具塔修改14ActionPerformed
        boolean result1 = this.玩具塔14.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.玩具塔14.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z玩具塔 WHERE id = ?");
                ps1.setInt(1, 13);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z玩具塔 where id =13";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z玩具塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 13);
                ps.setString(2, "玩具通关经验");
                ps.setInt(3, Integer.parseInt(this.玩具塔14.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新玩具塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_玩具塔修改14ActionPerformed

    private void 玩具塔修改13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_玩具塔修改13ActionPerformed
        boolean result1 = this.玩具塔13.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.玩具塔13.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z玩具塔 WHERE id = ?");
                ps1.setInt(1, 12);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z玩具塔 where id =12";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z玩具塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 12);
                ps.setString(2, "玩具第九关经验");
                ps.setInt(3, Integer.parseInt(this.玩具塔13.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新玩具塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }   // TODO add your handling code here:
    }//GEN-LAST:event_玩具塔修改13ActionPerformed

    private void 玩具塔修改12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_玩具塔修改12ActionPerformed
        boolean result1 = this.玩具塔12.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.玩具塔12.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z玩具塔 WHERE id = ?");
                ps1.setInt(1, 11);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z玩具塔 where id =11";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z玩具塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 11);
                ps.setString(2, "玩具第八关经验");
                ps.setInt(3, Integer.parseInt(this.玩具塔12.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新玩具塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }         // TODO add your handling code here:
    }//GEN-LAST:event_玩具塔修改12ActionPerformed

    private void 玩具塔修改11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_玩具塔修改11ActionPerformed
        boolean result1 = this.玩具塔11.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.玩具塔11.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z玩具塔 WHERE id = ?");
                ps1.setInt(1, 10);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z玩具塔 where id =10";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z玩具塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 10);
                ps.setString(2, "玩具第七关经验");
                ps.setInt(3, Integer.parseInt(this.玩具塔11.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新玩具塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }            // TODO add your handling code here:
    }//GEN-LAST:event_玩具塔修改11ActionPerformed

    private void 玩具塔修改10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_玩具塔修改10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_玩具塔修改10ActionPerformed

    private void 玩具塔修改9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_玩具塔修改9ActionPerformed
        boolean result1 = this.玩具塔9.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.玩具塔9.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z玩具塔 WHERE id = ?");
                ps1.setInt(1, 9);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z玩具塔 where id =9";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z玩具塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 9);
                ps.setString(2, "玩具第五关经验");
                ps.setInt(3, Integer.parseInt(this.玩具塔9.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新玩具塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }         // TODO add your handling code here:
    }//GEN-LAST:event_玩具塔修改9ActionPerformed

    private void 玩具塔修改8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_玩具塔修改8ActionPerformed
        boolean result1 = this.玩具塔8.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.玩具塔8.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z玩具塔 WHERE id = ?");
                ps1.setInt(1, 8);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z玩具塔 where id =8";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z玩具塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 8);
                ps.setString(2, "玩具第四关经验");
                ps.setInt(3, Integer.parseInt(this.玩具塔8.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新玩具塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }         // TODO add your handling code here:
    }//GEN-LAST:event_玩具塔修改8ActionPerformed

    private void 玩具塔修改7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_玩具塔修改7ActionPerformed
        boolean result1 = this.玩具塔7.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.玩具塔7.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z玩具塔 WHERE id = ?");
                ps1.setInt(1, 7);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z玩具塔 where id =7";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z玩具塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 7);
                ps.setString(2, "玩具第三关经验");
                ps.setInt(3, Integer.parseInt(this.玩具塔7.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新玩具塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_玩具塔修改7ActionPerformed

    private void 玩具塔修改6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_玩具塔修改6ActionPerformed
        boolean result1 = this.玩具塔6.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.玩具塔6.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z玩具塔 WHERE id = ?");
                ps1.setInt(1, 6);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z玩具塔 where id =6";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z玩具塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 6);
                ps.setString(2, "玩具第二关经验");
                ps.setInt(3, Integer.parseInt(this.玩具塔6.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新玩具塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }         // TODO add your handling code here:
    }//GEN-LAST:event_玩具塔修改6ActionPerformed

    private void 玩具塔修改5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_玩具塔修改5ActionPerformed
        boolean result1 = this.玩具塔5.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.玩具塔5.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z玩具塔 WHERE id = ?");
                ps1.setInt(1, 5);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z玩具塔 where id =5";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z玩具塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 5);
                ps.setString(2, "玩具第一关经验");
                ps.setInt(3, Integer.parseInt(this.玩具塔5.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新玩具塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_玩具塔修改5ActionPerformed

    private void 刷新玩具塔设置ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_刷新玩具塔设置ActionPerformed
        刷新玩具塔设置();     // TODO add your handling code here:
    }//GEN-LAST:event_刷新玩具塔设置ActionPerformed

    private void 玩具塔修改4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_玩具塔修改4ActionPerformed
        boolean result1 = this.玩具塔4.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.玩具塔4.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z玩具塔 WHERE id = ?");
                ps1.setInt(1, 4);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z玩具塔 where id =4";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z玩具塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 4);
                ps.setString(2, "玩具副本最高等级");
                ps.setInt(3, Integer.parseInt(this.玩具塔4.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新玩具塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }   // TODO add your handling code here:
    }//GEN-LAST:event_玩具塔修改4ActionPerformed

    private void 玩具塔修改3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_玩具塔修改3ActionPerformed
        boolean result1 = this.玩具塔3.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.玩具塔3.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z玩具塔 WHERE id = ?");
                ps1.setInt(1, 3);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z玩具塔 where id =3";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z玩具塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 3);
                ps.setString(2, "玩具副本最低等级");
                ps.setInt(3, Integer.parseInt(this.玩具塔3.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新玩具塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }         // TODO add your handling code here:
    }//GEN-LAST:event_玩具塔修改3ActionPerformed

    private void 玩具塔修改2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_玩具塔修改2ActionPerformed
        boolean result1 = this.玩具塔2.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.玩具塔2.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z玩具塔 WHERE id = ?");
                ps1.setInt(1, 2);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z玩具塔 where id =2";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z玩具塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 2);
                ps.setString(2, "玩具副本最大人数");
                ps.setInt(3, Integer.parseInt(this.玩具塔2.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新玩具塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }    // TODO add your handling code here:
    }//GEN-LAST:event_玩具塔修改2ActionPerformed

    private void 玩具塔修改1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_玩具塔修改1ActionPerformed
        boolean result1 = this.玩具塔1.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.玩具塔1.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z玩具塔 WHERE id = ?");
                ps1.setInt(1, 1);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z玩具塔 where id =1";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z玩具塔 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 1);
                ps.setString(2, "玩具副本最小人数");
                ps.setInt(3, Integer.parseInt(this.玩具塔1.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新玩具塔设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_玩具塔修改1ActionPerformed

    private void 刷新玩具塔副本奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_刷新玩具塔副本奖励ActionPerformed
        刷新玩具塔奖励();
    }//GEN-LAST:event_刷新玩具塔副本奖励ActionPerformed

    private void 废都修改8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_废都修改8ActionPerformed
        boolean result1 = this.废都8.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.废都8.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z废弃沼泽 WHERE id = ?");
                ps1.setInt(1, 8);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z废弃沼泽 where id =8";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z废弃沼泽 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 8);
                ps.setString(2, "废弃通关金币");
                ps.setInt(3, Integer.parseInt(this.废都8.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新废都();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }   // TODO add your handling code here:
    }//GEN-LAST:event_废都修改8ActionPerformed

    private void 废都修改7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_废都修改7ActionPerformed
        boolean result1 = this.废都7.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.废都7.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z废弃沼泽 WHERE id = ?");
                ps1.setInt(1, 7);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z废弃沼泽 where id =7";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z废弃沼泽 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 7);
                ps.setString(2, "废弃通关经验");
                ps.setInt(3, Integer.parseInt(this.废都7.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新废都();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }   // TODO add your handling code here:
    }//GEN-LAST:event_废都修改7ActionPerformed

    private void 废都修改6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_废都修改6ActionPerformed
        boolean result1 = this.废都6.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.废都6.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z废弃沼泽 WHERE id = ?");
                ps1.setInt(1, 6);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z废弃沼泽 where id =6";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z废弃沼泽 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 6);
                ps.setString(2, "废弃第二三四关经验");
                ps.setInt(3, Integer.parseInt(this.废都6.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新废都();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }          // TODO add your handling code here:
    }//GEN-LAST:event_废都修改6ActionPerformed

    private void 废都修改5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_废都修改5ActionPerformed
        boolean result1 = this.废都5.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.废都5.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z废弃沼泽 WHERE id = ?");
                ps1.setInt(1, 5);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z废弃沼泽 where id =5";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z废弃沼泽 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 5);
                ps.setString(2, "废弃第一关经验");
                ps.setInt(3, Integer.parseInt(this.废都5.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新废都();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_废都修改5ActionPerformed

    private void 刷新废都设置ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_刷新废都设置ActionPerformed
        刷新废都();
    }//GEN-LAST:event_刷新废都设置ActionPerformed

    private void 废都修改4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_废都修改4ActionPerformed
        boolean result1 = this.废都4.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.废都4.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z废弃沼泽 WHERE id = ?");
                ps1.setInt(1, 4);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z废弃沼泽 where id =4";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z废弃沼泽 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 4);
                ps.setString(2, "废弃副本最高等级");
                ps.setInt(3, Integer.parseInt(this.废都4.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新废都();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }          // TODO add your handling code here:
    }//GEN-LAST:event_废都修改4ActionPerformed

    private void 废都修改3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_废都修改3ActionPerformed
        boolean result1 = this.废都3.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.废都3.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z废弃沼泽 WHERE id = ?");
                ps1.setInt(1, 3);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z废弃沼泽 where id =3";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z废弃沼泽 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 3);
                ps.setString(2, "废弃副本最低等级");
                ps.setInt(3, Integer.parseInt(this.废都3.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新废都();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_废都修改3ActionPerformed

    private void 废都修改2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_废都修改2ActionPerformed
        boolean result1 = this.废都2.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.废都2.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z废弃沼泽 WHERE id = ?");
                ps1.setInt(1, 2);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z废弃沼泽 where id =2";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z废弃沼泽 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 2);
                ps.setString(2, "废弃副本最大人数");
                ps.setInt(3, Integer.parseInt(this.废都2.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新废都();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_废都修改2ActionPerformed

    private void 废都修改1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_废都修改1ActionPerformed
        boolean result1 = this.废都1.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.废都1.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z废弃沼泽 WHERE id = ?");
                ps1.setInt(1, 1);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z废弃沼泽 where id =1";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z废弃沼泽 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 1);
                ps.setString(2, "废弃副本最小人数");
                ps.setInt(3, Integer.parseInt(this.废都1.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新废都();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        }      // TODO add your handling code here:
    }//GEN-LAST:event_废都修改1ActionPerformed

    private void 刷新废都副本奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_刷新废都副本奖励ActionPerformed
        刷新废都奖励();             // TODO add your handling code here:
    }//GEN-LAST:event_刷新废都副本奖励ActionPerformed

    private void 删除废都奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_删除废都奖励ActionPerformed
        PreparedStatement ps1 = null;
        ResultSet rs = null;
        boolean result1 = this.废都奖励序号.getText().matches("[0-9]+");

        if (result1) {
            try {
                for (int i = ((DefaultTableModel) (this.废都副本奖励.getModel())).getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) (this.废都副本奖励.getModel())).removeRow(i);
                }
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM 废都副本奖励 WHERE id = ?");
                ps1.setInt(1, Integer.parseInt(this.废都奖励序号.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from 废都副本奖励 where id =" + Integer.parseInt(this.废都奖励序号.getText()) + "";
                    ps1.executeUpdate(sqlstr);
                    刷新废都奖励();
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请点击你需要删除的奖励 ");
        }
    }//GEN-LAST:event_删除废都奖励ActionPerformed

    private void 新增废都奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_新增废都奖励ActionPerformed
        boolean result1 = this.废都奖励代码.getText().matches("[0-9]+");
        boolean result2 = this.废都奖励随机下限.getText().matches("[0-9]+");
        boolean result3 = this.废都奖励随机上限.getText().matches("[0-9]+");
        boolean result4 = this.废都奖励获得概率.getText().matches("[0-9]+");
        if (result1 && result2 && result3 && result4) {
            if (Integer.parseInt(this.废都奖励代码.getText()) < 0 && Integer.parseInt(this.废都奖励随机下限.getText()) < 0 && Integer.parseInt(this.废都奖励随机上限.getText()) < 0 && Integer.parseInt(this.废都奖励获得概率.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
                return;
            }
            if (Integer.parseInt(this.废都奖励获得概率.getText()) > 127) {
                JOptionPane.showMessageDialog(null, "概率无法超过 127 ");
                return;
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO 废都副本奖励 (itemId, baseQty,maxRandomQty,chance) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, Integer.parseInt(this.废都奖励代码.getText()));
                ps.setInt(2, Integer.parseInt(this.废都奖励随机下限.getText()));
                ps.setInt(3, Integer.parseInt(this.废都奖励随机上限.getText()));
                ps.setInt(4, Integer.parseInt(this.废都奖励获得概率.getText()));
                ps.executeUpdate();
                for (int i = ((DefaultTableModel) (this.废都副本奖励.getModel())).getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) (this.废都副本奖励.getModel())).removeRow(i);
                }
                刷新废都奖励();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入你想要添加的奖励 ");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_新增废都奖励ActionPerformed

    private void 修改6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_修改6ActionPerformed
        boolean result1 = this.月妙6.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.月妙6.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z月妙 WHERE id = ?");
                ps1.setInt(1, 6);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z月妙 where id =6";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z月妙 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 6);
                ps.setString(2, "月妙通关金币");
                ps.setInt(3, Integer.parseInt(this.月妙6.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();
                刷新();

            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(null, "请输入数字 ");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_修改6ActionPerformed

    private void 修改5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_修改5ActionPerformed
        boolean result1 = this.月妙5.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.月妙5.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z月妙 WHERE id = ?");
                ps1.setInt(1, 5);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z月妙 where id =5";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z月妙 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 5);
                ps.setString(2, "月妙通关经验");
                ps.setInt(3, Integer.parseInt(this.月妙5.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();
                刷新();

            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(null, "请输入数字 ");
        }           // TODO add your handling code here:
    }//GEN-LAST:event_修改5ActionPerformed

    private void 修改4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_修改4ActionPerformed
        boolean result1 = this.月妙4.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.月妙4.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z月妙 WHERE id = ?");
                ps1.setInt(1, 4);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z月妙 where id =4";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z月妙 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 4);
                ps.setString(2, "月妙副本最高等级");
                ps.setInt(3, Integer.parseInt(this.月妙4.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();
                刷新();

            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(null, "请输入数字 ");
        }          // TODO add your handling code here:
    }//GEN-LAST:event_修改4ActionPerformed

    private void 修改3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_修改3ActionPerformed
        boolean result1 = this.月妙3.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.月妙3.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z月妙 WHERE id = ?");
                ps1.setInt(1, 3);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z月妙 where id =3";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z月妙 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 3);
                ps.setString(2, "月妙副本最低等级");
                ps.setInt(3, Integer.parseInt(this.月妙3.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();
                刷新();

            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(null, "请输入数字 ");
        }        // TODO         // TODO add your handling code here:
    }//GEN-LAST:event_修改3ActionPerformed

    private void 修改2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_修改2ActionPerformed
        boolean result1 = this.月妙2.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.月妙2.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z月妙 WHERE id = ?");
                ps1.setInt(1, 2);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z月妙 where id =2";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z月妙 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 2);
                ps.setString(2, "月妙副本最大人数");
                ps.setInt(3, Integer.parseInt(this.月妙2.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();
                刷新();

            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(null, "请输入数字 ");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_修改2ActionPerformed

    private void 修改1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_修改1ActionPerformed
        boolean result1 = this.月妙1.getText().matches("[0-9]+");

        if (result1) {
            if (Integer.parseInt(this.月妙1.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z月妙 WHERE id = ?");
                ps1.setInt(1, 1);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z月妙 where id =1";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z月妙 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 1);
                ps.setString(2, "月妙副本最小人数");
                ps.setInt(3, Integer.parseInt(this.月妙1.getText()));
                ps.setInt(4, 1);

                ps.executeUpdate();

                刷新();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {

        }
    }//GEN-LAST:event_修改1ActionPerformed

    private void 刷新月妙设置ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_刷新月妙设置ActionPerformed

        for (int i = ((DefaultTableModel) (this.刷新最小人数.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.刷新最小人数.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z月妙 WHERE id = 1");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 刷新最小人数.getModel()).insertRow(刷新最小人数.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.刷新最大人数.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.刷新最大人数.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z月妙 WHERE id = 2");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 刷新最大人数.getModel()).insertRow(刷新最大人数.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.刷新最低等级.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.刷新最低等级.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z月妙 WHERE id = 3");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 刷新最低等级.getModel()).insertRow(刷新最低等级.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.刷新最高等级.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.刷新最高等级.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z月妙 WHERE id = 4");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 刷新最高等级.getModel()).insertRow(刷新最高等级.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.月妙通关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.月妙通关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z月妙 WHERE id = 5");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 月妙通关经验.getModel()).insertRow(月妙通关经验.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        for (int i = ((DefaultTableModel) (this.月妙通关金币.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.月妙通关金币.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z月妙 WHERE id = 6");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 月妙通关金币.getModel()).insertRow(月妙通关金币.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_刷新月妙设置ActionPerformed

    private void 刷新月妙副本奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_刷新月妙副本奖励ActionPerformed
        刷新月妙奖励();              // TODO add your handling code here:
    }//GEN-LAST:event_刷新月妙副本奖励ActionPerformed

    private void 刷新海盗副本奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_刷新海盗副本奖励ActionPerformed
        刷新海盗副本奖励();        // TODO add your handling code here:
    }//GEN-LAST:event_刷新海盗副本奖励ActionPerformed

    private void 海盗1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_海盗1ActionPerformed
        boolean result1 = this.海盗最小人数代码.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.海盗最小人数代码.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z海盗 WHERE id = ?");
                ps1.setInt(1, 1);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z海盗 where id =1";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z海盗 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 1);
                ps.setString(2, "海盗副本最小人数");
                ps.setInt(3, Integer.parseInt(this.海盗最小人数代码.getText()));
                ps.setInt(4, 1);
                ps.executeUpdate();
                刷新海盗设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        }          // TODO add your handling code here:
    }//GEN-LAST:event_海盗1ActionPerformed

    private void 海盗2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_海盗2ActionPerformed
        boolean result1 = this.海盗最大人数代码.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.海盗最大人数代码.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z海盗 WHERE id = ?");
                ps1.setInt(1, 2);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z海盗 where id =2";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z海盗 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 2);
                ps.setString(2, "海盗副本最大人数");
                ps.setInt(3, Integer.parseInt(this.海盗最大人数代码.getText()));
                ps.setInt(4, 1);
                ps.executeUpdate();
                刷新海盗设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        }         // TODO add your handling code here:
    }//GEN-LAST:event_海盗2ActionPerformed

    private void 海盗3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_海盗3ActionPerformed
        boolean result1 = this.海盗最低等级代码.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.海盗最低等级代码.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z海盗 WHERE id = ?");
                ps1.setInt(1, 3);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z海盗 where id =3";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z海盗 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 3);
                ps.setString(2, "海盗副本最低等级");
                ps.setInt(3, Integer.parseInt(this.海盗最低等级代码.getText()));
                ps.setInt(4, 1);
                ps.executeUpdate();
                刷新海盗设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        }            // TODO add your handling code here:
    }//GEN-LAST:event_海盗3ActionPerformed

    private void 海盗4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_海盗4ActionPerformed
        boolean result1 = this.海盗最高等级代码.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.海盗最高等级代码.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z海盗 WHERE id = ?");
                ps1.setInt(1, 4);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z海盗 where id =4";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z海盗 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 4);
                ps.setString(2, "海盗副本最高等级");
                ps.setInt(3, Integer.parseInt(this.海盗最高等级代码.getText()));
                ps.setInt(4, 1);
                ps.executeUpdate();
                刷新海盗设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        }         // TODO add your handling code here:
    }//GEN-LAST:event_海盗4ActionPerformed

    private void 海盗5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_海盗5ActionPerformed
        boolean result1 = this.海盗通关经验代码.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.海盗通关经验代码.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z海盗 WHERE id = ?");
                ps1.setInt(1, 5);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z海盗 where id =5";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z海盗 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 5);
                ps.setString(2, "海盗通关经验");
                ps.setInt(3, Integer.parseInt(this.海盗通关经验代码.getText()));
                ps.setInt(4, 1);
                ps.executeUpdate();
                刷新海盗设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        }         // TODO add your handling code here:
    }//GEN-LAST:event_海盗5ActionPerformed

    private void 海盗6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_海盗6ActionPerformed
        boolean result1 = this.海盗通关金币代码.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.海盗通关金币代码.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z海盗 WHERE id = ?");
                ps1.setInt(1, 6);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z海盗 where id =6";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z海盗 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 6);
                ps.setString(2, "海盗通关金币");
                ps.setInt(3, Integer.parseInt(this.海盗通关金币代码.getText()));
                ps.setInt(4, 1);
                ps.executeUpdate();
                刷新海盗设置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_海盗6ActionPerformed

    private void 刷新海盗设置ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_刷新海盗设置ActionPerformed
        刷新海盗设置();        // TODO add your handling code here:
    }//GEN-LAST:event_刷新海盗设置ActionPerformed

    private void 刷新月妙副本奖励1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_刷新月妙副本奖励1ActionPerformed
        刷新毒雾奖励();        // TODO add your handling code here:
    }//GEN-LAST:event_刷新月妙副本奖励1ActionPerformed

    private void 刷新毒雾森林设置ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_刷新毒雾森林设置ActionPerformed
        刷新毒雾配置();        // TODO add your handling code here:
    }//GEN-LAST:event_刷新毒雾森林设置ActionPerformed

    private void 毒雾森林10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_毒雾森林10ActionPerformed
        boolean result1 = this.毒雾森林1.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.毒雾森林1.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z毒雾森林 WHERE id = ?");
                ps1.setInt(1, 1);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z毒雾森林 where id =1";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z毒雾森林 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 1);
                ps.setString(2, "毒雾副本最小人数");
                ps.setInt(3, Integer.parseInt(this.毒雾森林1.getText()));
                ps.setInt(4, 1);
                ps.executeUpdate();
                刷新毒雾配置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_毒雾森林10ActionPerformed

    private void 毒雾森林20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_毒雾森林20ActionPerformed
        boolean result1 = this.毒雾森林2.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.毒雾森林2.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z毒雾森林 WHERE id = ?");
                ps1.setInt(1, 2);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z毒雾森林 where id =2";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z毒雾森林 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 2);
                ps.setString(2, "毒雾副本最大人数");
                ps.setInt(3, Integer.parseInt(this.毒雾森林2.getText()));
                ps.setInt(4, 1);
                ps.executeUpdate();
                刷新毒雾配置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        }           // TODO add your handling code here:
    }//GEN-LAST:event_毒雾森林20ActionPerformed

    private void 毒雾森林30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_毒雾森林30ActionPerformed
        boolean result1 = this.毒雾森林3.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.毒雾森林3.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z毒雾森林 WHERE id = ?");
                ps1.setInt(1, 3);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z毒雾森林 where id =3";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z毒雾森林 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 3);
                ps.setString(2, "毒雾副本最低等级");
                ps.setInt(3, Integer.parseInt(this.毒雾森林3.getText()));
                ps.setInt(4, 1);
                ps.executeUpdate();
                刷新毒雾配置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        }          // TODO add your handling code here:
    }//GEN-LAST:event_毒雾森林30ActionPerformed

    private void 毒雾森林40ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_毒雾森林40ActionPerformed
        boolean result1 = this.毒雾森林4.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.毒雾森林4.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z毒雾森林 WHERE id = ?");
                ps1.setInt(1, 4);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z毒雾森林 where id =4";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z毒雾森林 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 4);
                ps.setString(2, "毒雾副本最高等级");
                ps.setInt(3, Integer.parseInt(this.毒雾森林4.getText()));
                ps.setInt(4, 1);
                ps.executeUpdate();
                刷新毒雾配置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_毒雾森林40ActionPerformed

    private void 毒雾森林50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_毒雾森林50ActionPerformed
        boolean result1 = this.毒雾森林5.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.毒雾森林5.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z毒雾森林 WHERE id = ?");
                ps1.setInt(1, 5);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z毒雾森林 where id =5";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z毒雾森林 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 5);
                ps.setString(2, "毒雾通关经验");
                ps.setInt(3, Integer.parseInt(this.毒雾森林5.getText()));
                ps.setInt(4, 1);
                ps.executeUpdate();
                刷新毒雾配置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        }         // TODO add your handling code here:
    }//GEN-LAST:event_毒雾森林50ActionPerformed

    private void 毒雾森林60ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_毒雾森林60ActionPerformed
        boolean result1 = this.毒雾森林6.getText().matches("[0-9]+");
        if (result1) {
            if (Integer.parseInt(this.毒雾森林6.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
            }
            PreparedStatement ps1 = null;
            ResultSet rs = null;
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM z毒雾森林 WHERE id = ?");
                ps1.setInt(1, 6);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from z毒雾森林 where id =6";
                    ps1.executeUpdate(sqlstr);
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO z毒雾森林 (id, Name,Point,channel) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 6);
                ps.setString(2, "毒雾通关金币");
                ps.setInt(3, Integer.parseInt(this.毒雾森林6.getText()));
                ps.setInt(4, 1);
                ps.executeUpdate();
                刷新毒雾配置();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        }            // TODO add your handling code here:
    }//GEN-LAST:event_毒雾森林60ActionPerformed

    private void 修改废都奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_修改废都奖励ActionPerformed
        boolean result1 = this.废都奖励代码.getText().matches("[0-9]+");
        boolean result2 = this.废都奖励随机下限.getText().matches("[0-9]+");
        boolean result3 = this.废都奖励随机上限.getText().matches("[0-9]+");
        boolean result4 = this.废都奖励获得概率.getText().matches("[0-9]+");
        PreparedStatement ps = null;
        PreparedStatement ps1 = null;
        ResultSet rs = null;
        if (result1 && result2 && result3 && result4) {

            try {
                ps = DatabaseConnection.getConnection().prepareStatement("UPDATE 废都副本奖励 SET itemId = ?, baseQty = ?, maxRandomQty = ?, chance = ? WHERE id = ?");
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM 废都副本奖励 WHERE id = ?");
                ps1.setInt(1, Integer.parseInt(this.废都奖励序号.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlString2 = null;
                    String sqlString3 = null;
                    String sqlString4 = null;
                    String sqlString5 = null;
                    sqlString2 = "update 废都副本奖励 set itemId='" + this.废都奖励代码.getText() + "' where id=" + this.废都奖励序号.getText() + ";";
                    PreparedStatement priority = DatabaseConnection.getConnection().prepareStatement(sqlString2);
                    priority.executeUpdate(sqlString2);
                    sqlString3 = "update 废都副本奖励 set baseQty='" + this.废都奖励随机下限.getText() + "' where id=" + this.废都奖励序号.getText() + ";";
                    PreparedStatement period = DatabaseConnection.getConnection().prepareStatement(sqlString3);
                    period.executeUpdate(sqlString3);
                    sqlString4 = "update 废都副本奖励 set maxRandomQty='" + this.废都奖励随机上限.getText() + "' where id=" + this.废都奖励序号.getText() + ";";
                    PreparedStatement maxRandomQty = DatabaseConnection.getConnection().prepareStatement(sqlString4);
                    maxRandomQty.executeUpdate(sqlString4);
                    sqlString5 = "update 废都副本奖励 set chance='" + this.废都奖励获得概率.getText() + "' where id=" + this.废都奖励序号.getText() + ";";
                    PreparedStatement chance = DatabaseConnection.getConnection().prepareStatement(sqlString5);
                    chance.executeUpdate(sqlString5);
                    刷新废都奖励();
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请点击你需要修改的物品");
        }
    }//GEN-LAST:event_修改废都奖励ActionPerformed

    private void 新增玩具塔奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_新增玩具塔奖励ActionPerformed
        boolean result1 = this.玩具塔奖励代码.getText().matches("[0-9]+");
        boolean result2 = this.玩具塔奖励随机下限.getText().matches("[0-9]+");
        boolean result3 = this.玩具塔奖励随机上限.getText().matches("[0-9]+");
        boolean result4 = this.玩具塔奖励获得概率.getText().matches("[0-9]+");
        if (result1 && result2 && result3 && result4) {
            if (Integer.parseInt(this.玩具塔奖励代码.getText()) < 0 && Integer.parseInt(this.玩具塔奖励随机下限.getText()) < 0 && Integer.parseInt(this.玩具塔奖励随机上限.getText()) < 0 && Integer.parseInt(this.玩具塔奖励获得概率.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
                return;
            }
            if (Integer.parseInt(this.玩具塔奖励获得概率.getText()) > 127) {
                JOptionPane.showMessageDialog(null, "概率无法超过 127 ");
                return;
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO 玩具塔副本奖励 (itemId, baseQty,maxRandomQty,chance) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, Integer.parseInt(this.玩具塔奖励代码.getText()));
                ps.setInt(2, Integer.parseInt(this.玩具塔奖励随机下限.getText()));
                ps.setInt(3, Integer.parseInt(this.玩具塔奖励随机上限.getText()));
                ps.setInt(4, Integer.parseInt(this.玩具塔奖励获得概率.getText()));
                ps.executeUpdate();
                刷新玩具塔奖励();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入你想要添加的奖励 ");
        }
    }//GEN-LAST:event_新增玩具塔奖励ActionPerformed

    private void 删除玩具塔奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_删除玩具塔奖励ActionPerformed
        PreparedStatement ps1 = null;
        ResultSet rs = null;
        boolean result1 = this.玩具塔奖励序号.getText().matches("[0-9]+");

        if (result1) {
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM 玩具塔副本奖励 WHERE id = ?");
                ps1.setInt(1, Integer.parseInt(this.玩具塔奖励序号.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from 玩具塔副本奖励 where id =" + Integer.parseInt(this.玩具塔奖励序号.getText()) + "";
                    ps1.executeUpdate(sqlstr);
                    刷新玩具塔奖励();
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请点击你需要删除的奖励 ");
        }
    }//GEN-LAST:event_删除玩具塔奖励ActionPerformed

    private void 修改玩具塔奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_修改玩具塔奖励ActionPerformed
        boolean result1 = this.玩具塔奖励代码.getText().matches("[0-9]+");
        boolean result2 = this.玩具塔奖励随机下限.getText().matches("[0-9]+");
        boolean result3 = this.玩具塔奖励随机上限.getText().matches("[0-9]+");
        boolean result4 = this.玩具塔奖励获得概率.getText().matches("[0-9]+");
        PreparedStatement ps = null;
        PreparedStatement ps1 = null;
        ResultSet rs = null;
        if (result1 && result2 && result3 && result4) {
            try {
                ps = DatabaseConnection.getConnection().prepareStatement("UPDATE 玩具塔副本奖励 SET itemId = ?, baseQty = ?, maxRandomQty = ?, chance = ? WHERE id = ?");
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM 玩具塔副本奖励 WHERE id = ?");
                ps1.setInt(1, Integer.parseInt(this.玩具塔奖励序号.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlString2 = null;
                    String sqlString3 = null;
                    String sqlString4 = null;
                    String sqlString5 = null;
                    sqlString2 = "update 玩具塔副本奖励 set itemId='" + this.玩具塔奖励代码.getText() + "' where id=" + this.玩具塔奖励序号.getText() + ";";
                    PreparedStatement priority = DatabaseConnection.getConnection().prepareStatement(sqlString2);
                    priority.executeUpdate(sqlString2);
                    sqlString3 = "update 玩具塔副本奖励 set baseQty='" + this.玩具塔奖励随机下限.getText() + "' where id=" + this.玩具塔奖励序号.getText() + ";";
                    PreparedStatement period = DatabaseConnection.getConnection().prepareStatement(sqlString3);
                    period.executeUpdate(sqlString3);
                    sqlString4 = "update 玩具塔副本奖励 set maxRandomQty='" + this.玩具塔奖励随机上限.getText() + "' where id=" + this.玩具塔奖励序号.getText() + ";";
                    PreparedStatement maxRandomQty = DatabaseConnection.getConnection().prepareStatement(sqlString4);
                    maxRandomQty.executeUpdate(sqlString4);
                    sqlString5 = "update 玩具塔副本奖励 set chance='" + this.玩具塔奖励获得概率.getText() + "' where id=" + this.玩具塔奖励序号.getText() + ";";
                    PreparedStatement chance = DatabaseConnection.getConnection().prepareStatement(sqlString5);
                    chance.executeUpdate(sqlString5);
                    刷新玩具塔奖励();
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请点击你需要修改的物品");
        }
    }//GEN-LAST:event_修改玩具塔奖励ActionPerformed

    private void 新增海盗奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_新增海盗奖励ActionPerformed
        boolean result1 = this.海盗奖励代码.getText().matches("[0-9]+");
        boolean result2 = this.海盗奖励随机下限.getText().matches("[0-9]+");
        boolean result3 = this.海盗奖励随机上限.getText().matches("[0-9]+");
        boolean result4 = this.海盗奖励获得概率.getText().matches("[0-9]+");
        if (result1 && result2 && result3 && result4) {
            if (Integer.parseInt(this.海盗奖励代码.getText()) < 0 && Integer.parseInt(this.海盗奖励随机下限.getText()) < 0 && Integer.parseInt(this.海盗奖励随机上限.getText()) < 0 && Integer.parseInt(this.海盗奖励获得概率.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
                return;
            }
            if (Integer.parseInt(this.海盗奖励获得概率.getText()) > 127) {
                JOptionPane.showMessageDialog(null, "概率无法超过 127 ");
                return;
            }

            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO 海盗副本奖励 (itemId, baseQty,maxRandomQty,chance) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, Integer.parseInt(this.海盗奖励代码.getText()));
                ps.setInt(2, Integer.parseInt(this.海盗奖励随机下限.getText()));
                ps.setInt(3, Integer.parseInt(this.海盗奖励随机上限.getText()));
                ps.setInt(4, Integer.parseInt(this.海盗奖励获得概率.getText()));
                ps.executeUpdate();
                刷新海盗副本奖励();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入你想要添加的奖励 ");
        }
    }//GEN-LAST:event_新增海盗奖励ActionPerformed

    private void 删除海盗奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_删除海盗奖励ActionPerformed
        PreparedStatement ps1 = null;
        ResultSet rs = null;
        boolean result1 = this.海盗奖励序号.getText().matches("[0-9]+");

        if (result1) {
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM 海盗副本奖励 WHERE id = ?");
                ps1.setInt(1, Integer.parseInt(this.海盗奖励序号.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from 海盗副本奖励 where id =" + Integer.parseInt(this.海盗奖励序号.getText()) + "";
                    ps1.executeUpdate(sqlstr);
                    刷新海盗副本奖励();
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请点击你需要删除的奖励 ");
        }
    }//GEN-LAST:event_删除海盗奖励ActionPerformed

    private void 修改海盗奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_修改海盗奖励ActionPerformed
        boolean result1 = this.海盗奖励代码.getText().matches("[0-9]+");
        boolean result2 = this.海盗奖励随机下限.getText().matches("[0-9]+");
        boolean result3 = this.海盗奖励随机上限.getText().matches("[0-9]+");
        boolean result4 = this.海盗奖励获得概率.getText().matches("[0-9]+");
        PreparedStatement ps = null;
        PreparedStatement ps1 = null;
        ResultSet rs = null;
        if (result1 && result2 && result3 && result4) {
            try {
                ps = DatabaseConnection.getConnection().prepareStatement("UPDATE 海盗副本奖励 SET itemId = ?, baseQty = ?, maxRandomQty = ?, chance = ? WHERE id = ?");
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM 海盗副本奖励 WHERE id = ?");
                ps1.setInt(1, Integer.parseInt(this.海盗奖励序号.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlString2 = null;
                    String sqlString3 = null;
                    String sqlString4 = null;
                    String sqlString5 = null;
                    sqlString2 = "update 海盗副本奖励 set itemId='" + this.海盗奖励代码.getText() + "' where id=" + this.海盗奖励序号.getText() + ";";
                    PreparedStatement priority = DatabaseConnection.getConnection().prepareStatement(sqlString2);
                    priority.executeUpdate(sqlString2);
                    sqlString3 = "update 海盗副本奖励 set baseQty='" + this.海盗奖励随机下限.getText() + "' where id=" + this.海盗奖励序号.getText() + ";";
                    PreparedStatement period = DatabaseConnection.getConnection().prepareStatement(sqlString3);
                    period.executeUpdate(sqlString3);
                    sqlString4 = "update 海盗副本奖励 set maxRandomQty='" + this.海盗奖励随机上限.getText() + "' where id=" + this.海盗奖励序号.getText() + ";";
                    PreparedStatement maxRandomQty = DatabaseConnection.getConnection().prepareStatement(sqlString4);
                    maxRandomQty.executeUpdate(sqlString4);
                    sqlString5 = "update 海盗副本奖励 set chance='" + this.海盗奖励获得概率.getText() + "' where id=" + this.海盗奖励序号.getText() + ";";
                    PreparedStatement chance = DatabaseConnection.getConnection().prepareStatement(sqlString5);
                    chance.executeUpdate(sqlString5);
                    刷新海盗副本奖励();
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请点击你需要修改的物品");
        }
    }//GEN-LAST:event_修改海盗奖励ActionPerformed

    private void 新增月妙奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_新增月妙奖励ActionPerformed
        boolean result1 = this.月妙奖励代码.getText().matches("[0-9]+");
        boolean result2 = this.月妙奖励随机下限.getText().matches("[0-9]+");
        boolean result3 = this.月妙奖励随机上限.getText().matches("[0-9]+");
        boolean result4 = this.月妙奖励获得概率.getText().matches("[0-9]+");
        if (result1 && result2 && result3 && result4) {
            if (Integer.parseInt(this.月妙奖励代码.getText()) < 0 && Integer.parseInt(this.月妙奖励随机下限.getText()) < 0 && Integer.parseInt(this.月妙奖励随机上限.getText()) < 0 && Integer.parseInt(this.月妙奖励获得概率.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
                return;
            }
            if (Integer.parseInt(this.月妙奖励获得概率.getText()) > 127) {
                JOptionPane.showMessageDialog(null, "概率无法超过 127 ");
                return;
            }
            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO 月妙副本奖励 (itemId, baseQty,maxRandomQty,chance) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, Integer.parseInt(this.月妙奖励代码.getText()));
                ps.setInt(2, Integer.parseInt(this.月妙奖励随机下限.getText()));
                ps.setInt(3, Integer.parseInt(this.月妙奖励随机上限.getText()));
                ps.setInt(4, Integer.parseInt(this.月妙奖励获得概率.getText()));
                ps.executeUpdate();
                刷新月妙奖励();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入你想要添加的奖励 ");
        }
    }//GEN-LAST:event_新增月妙奖励ActionPerformed

    private void 删除月妙奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_删除月妙奖励ActionPerformed
        PreparedStatement ps1 = null;
        ResultSet rs = null;
        boolean result1 = this.月妙奖励序号.getText().matches("[0-9]+");

        if (result1) {
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM 月妙副本奖励 WHERE id = ?");
                ps1.setInt(1, Integer.parseInt(this.月妙奖励序号.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from 月妙副本奖励 where id =" + Integer.parseInt(this.月妙奖励序号.getText()) + "";
                    ps1.executeUpdate(sqlstr);
                    刷新月妙奖励();
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请点击你需要删除的奖励 ");
        }
    }//GEN-LAST:event_删除月妙奖励ActionPerformed

    private void 修改月妙奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_修改月妙奖励ActionPerformed
        boolean result1 = this.月妙奖励代码.getText().matches("[0-9]+");
        boolean result2 = this.月妙奖励随机下限.getText().matches("[0-9]+");
        boolean result3 = this.月妙奖励随机上限.getText().matches("[0-9]+");
        boolean result4 = this.月妙奖励获得概率.getText().matches("[0-9]+");
        PreparedStatement ps = null;
        PreparedStatement ps1 = null;
        ResultSet rs = null;
        if (result1 && result2 && result3 && result4) {
            try {
                ps = DatabaseConnection.getConnection().prepareStatement("UPDATE 月妙副本奖励 SET itemId = ?, baseQty = ?, maxRandomQty = ?, chance = ? WHERE id = ?");
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM 月妙副本奖励 WHERE id = ?");
                ps1.setInt(1, Integer.parseInt(this.月妙奖励序号.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlString2 = null;
                    String sqlString3 = null;
                    String sqlString4 = null;
                    String sqlString5 = null;
                    sqlString2 = "update 月妙副本奖励 set itemId='" + this.月妙奖励代码.getText() + "' where id=" + this.月妙奖励序号.getText() + ";";
                    PreparedStatement priority = DatabaseConnection.getConnection().prepareStatement(sqlString2);
                    priority.executeUpdate(sqlString2);
                    sqlString3 = "update 月妙副本奖励 set baseQty='" + this.月妙奖励随机下限.getText() + "' where id=" + this.月妙奖励序号.getText() + ";";
                    PreparedStatement period = DatabaseConnection.getConnection().prepareStatement(sqlString3);
                    period.executeUpdate(sqlString3);
                    sqlString4 = "update 月妙副本奖励 set maxRandomQty='" + this.月妙奖励随机上限.getText() + "' where id=" + this.月妙奖励序号.getText() + ";";
                    PreparedStatement maxRandomQty = DatabaseConnection.getConnection().prepareStatement(sqlString4);
                    maxRandomQty.executeUpdate(sqlString4);
                    sqlString5 = "update 月妙副本奖励 set chance='" + this.月妙奖励获得概率.getText() + "' where id=" + this.月妙奖励序号.getText() + ";";
                    PreparedStatement chance = DatabaseConnection.getConnection().prepareStatement(sqlString5);
                    chance.executeUpdate(sqlString5);
                    刷新月妙奖励();
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请点击你需要修改的物品");
        }
    }//GEN-LAST:event_修改月妙奖励ActionPerformed

    private void 新增女神塔奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_新增女神塔奖励ActionPerformed
        boolean result1 = this.女神塔奖励代码.getText().matches("[0-9]+");
        boolean result2 = this.女神塔奖励随机下限.getText().matches("[0-9]+");
        boolean result3 = this.女神塔奖励随机上限.getText().matches("[0-9]+");
        boolean result4 = this.女神塔奖励获得概率.getText().matches("[0-9]+");
        if (result1 && result2 && result3 && result4) {
            if (Integer.parseInt(this.女神塔奖励代码.getText()) < 0 && Integer.parseInt(this.女神塔奖励随机下限.getText()) < 0 && Integer.parseInt(this.女神塔奖励随机上限.getText()) < 0 && Integer.parseInt(this.女神塔奖励获得概率.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
                return;
            }
            if (Integer.parseInt(this.女神塔奖励获得概率.getText()) > 127) {
                JOptionPane.showMessageDialog(null, "概率无法超过 127 ");
                return;
            }
            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO 女神塔副本奖励 (itemId, baseQty,maxRandomQty,chance) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, Integer.parseInt(this.女神塔奖励代码.getText()));
                ps.setInt(2, Integer.parseInt(this.女神塔奖励随机下限.getText()));
                ps.setInt(3, Integer.parseInt(this.女神塔奖励随机上限.getText()));
                ps.setInt(4, Integer.parseInt(this.女神塔奖励获得概率.getText()));
                ps.executeUpdate();
                刷新女神塔奖励();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入你想要添加的奖励 ");
        }
    }//GEN-LAST:event_新增女神塔奖励ActionPerformed

    private void 删除女神塔奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_删除女神塔奖励ActionPerformed
        PreparedStatement ps1 = null;
        ResultSet rs = null;
        boolean result1 = this.女神塔奖励序号.getText().matches("[0-9]+");

        if (result1) {
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM 女神塔副本奖励 WHERE id = ?");
                ps1.setInt(1, Integer.parseInt(this.女神塔奖励序号.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from 女神塔副本奖励 where id =" + Integer.parseInt(this.女神塔奖励序号.getText()) + "";
                    ps1.executeUpdate(sqlstr);
                    刷新女神塔奖励();
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请点击你需要删除的奖励 ");
        }
    }//GEN-LAST:event_删除女神塔奖励ActionPerformed

    private void 修改女神塔奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_修改女神塔奖励ActionPerformed
        boolean result1 = this.女神塔奖励代码.getText().matches("[0-9]+");
        boolean result2 = this.女神塔奖励随机下限.getText().matches("[0-9]+");
        boolean result3 = this.女神塔奖励随机上限.getText().matches("[0-9]+");
        boolean result4 = this.女神塔奖励获得概率.getText().matches("[0-9]+");
        PreparedStatement ps = null;
        PreparedStatement ps1 = null;
        ResultSet rs = null;
        if (result1 && result2 && result3 && result4) {
            try {
                ps = DatabaseConnection.getConnection().prepareStatement("UPDATE 女神塔副本奖励 SET itemId = ?, baseQty = ?, maxRandomQty = ?, chance = ? WHERE id = ?");
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM 女神塔副本奖励 WHERE id = ?");
                ps1.setInt(1, Integer.parseInt(this.女神塔奖励序号.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlString2 = null;
                    String sqlString3 = null;
                    String sqlString4 = null;
                    String sqlString5 = null;
                    sqlString2 = "update 女神塔副本奖励 set itemId='" + this.女神塔奖励代码.getText() + "' where id=" + this.女神塔奖励序号.getText() + ";";
                    PreparedStatement priority = DatabaseConnection.getConnection().prepareStatement(sqlString2);
                    priority.executeUpdate(sqlString2);
                    sqlString3 = "update 女神塔副本奖励 set baseQty='" + this.女神塔奖励随机下限.getText() + "' where id=" + this.女神塔奖励序号.getText() + ";";
                    PreparedStatement period = DatabaseConnection.getConnection().prepareStatement(sqlString3);
                    period.executeUpdate(sqlString3);
                    sqlString4 = "update 女神塔副本奖励 set maxRandomQty='" + this.女神塔奖励随机上限.getText() + "' where id=" + this.女神塔奖励序号.getText() + ";";
                    PreparedStatement maxRandomQty = DatabaseConnection.getConnection().prepareStatement(sqlString4);
                    maxRandomQty.executeUpdate(sqlString4);
                    sqlString5 = "update 女神塔副本奖励 set chance='" + this.女神塔奖励获得概率.getText() + "' where id=" + this.女神塔奖励序号.getText() + ";";
                    PreparedStatement chance = DatabaseConnection.getConnection().prepareStatement(sqlString5);
                    chance.executeUpdate(sqlString5);
                    刷新女神塔奖励();
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请点击你需要修改的物品");
        }
    }//GEN-LAST:event_修改女神塔奖励ActionPerformed

    private void 新增毒雾奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_新增毒雾奖励ActionPerformed
        boolean result1 = this.毒雾奖励代码.getText().matches("[0-9]+");
        boolean result2 = this.毒雾奖励随机下限.getText().matches("[0-9]+");
        boolean result3 = this.毒雾奖励随机上限.getText().matches("[0-9]+");
        boolean result4 = this.毒雾奖励获得概率.getText().matches("[0-9]+");
        if (result1 && result2 && result3 && result4) {
            if (Integer.parseInt(this.毒雾奖励代码.getText()) < 0 && Integer.parseInt(this.毒雾奖励随机下限.getText()) < 0 && Integer.parseInt(this.毒雾奖励随机上限.getText()) < 0 && Integer.parseInt(this.毒雾奖励获得概率.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "请填写正确的值");
                return;
            }
            if (Integer.parseInt(this.毒雾奖励获得概率.getText()) > 127) {
                JOptionPane.showMessageDialog(null, "概率无法超过 127 ");
                return;
            }
            try (Connection con = DatabaseConnection.getConnection(); PreparedStatement ps = con.prepareStatement("INSERT INTO 毒雾副本奖励 (itemId, baseQty,maxRandomQty,chance) VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, Integer.parseInt(this.毒雾奖励代码.getText()));
                ps.setInt(2, Integer.parseInt(this.毒雾奖励随机下限.getText()));
                ps.setInt(3, Integer.parseInt(this.毒雾奖励随机上限.getText()));
                ps.setInt(4, Integer.parseInt(this.毒雾奖励获得概率.getText()));
                ps.executeUpdate();
                刷新毒雾奖励();
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入你想要添加的奖励 ");
        }
    }//GEN-LAST:event_新增毒雾奖励ActionPerformed

    private void 删除毒雾奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_删除毒雾奖励ActionPerformed
        PreparedStatement ps1 = null;
        ResultSet rs = null;
        boolean result1 = this.毒雾奖励序号.getText().matches("[0-9]+");

        if (result1) {
            try {
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM 毒雾副本奖励 WHERE id = ?");
                ps1.setInt(1, Integer.parseInt(this.毒雾奖励序号.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from 毒雾副本奖励 where id =" + Integer.parseInt(this.毒雾奖励序号.getText()) + "";
                    ps1.executeUpdate(sqlstr);
                    刷新毒雾奖励();
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请点击你需要删除的奖励 ");
        }
    }//GEN-LAST:event_删除毒雾奖励ActionPerformed

    private void 修改毒雾奖励ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_修改毒雾奖励ActionPerformed
        boolean result1 = this.毒雾奖励代码.getText().matches("[0-9]+");
        boolean result2 = this.毒雾奖励随机下限.getText().matches("[0-9]+");
        boolean result3 = this.毒雾奖励随机上限.getText().matches("[0-9]+");
        boolean result4 = this.毒雾奖励获得概率.getText().matches("[0-9]+");
        PreparedStatement ps = null;
        PreparedStatement ps1 = null;
        ResultSet rs = null;
        if (result1 && result2 && result3 && result4) {
            try {
                ps = DatabaseConnection.getConnection().prepareStatement("UPDATE 毒雾副本奖励 SET itemId = ?, baseQty = ?, maxRandomQty = ?, chance = ? WHERE id = ?");
                ps1 = DatabaseConnection.getConnection().prepareStatement("SELECT * FROM 毒雾副本奖励 WHERE id = ?");
                ps1.setInt(1, Integer.parseInt(this.毒雾奖励序号.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlString2 = null;
                    String sqlString3 = null;
                    String sqlString4 = null;
                    String sqlString5 = null;
                    sqlString2 = "update 毒雾副本奖励 set itemId='" + this.毒雾奖励代码.getText() + "' where id=" + this.毒雾奖励序号.getText() + ";";
                    PreparedStatement priority = DatabaseConnection.getConnection().prepareStatement(sqlString2);
                    priority.executeUpdate(sqlString2);
                    sqlString3 = "update 毒雾副本奖励 set baseQty='" + this.毒雾奖励随机下限.getText() + "' where id=" + this.毒雾奖励序号.getText() + ";";
                    PreparedStatement period = DatabaseConnection.getConnection().prepareStatement(sqlString3);
                    period.executeUpdate(sqlString3);
                    sqlString4 = "update 毒雾副本奖励 set maxRandomQty='" + this.毒雾奖励随机上限.getText() + "' where id=" + this.毒雾奖励序号.getText() + ";";
                    PreparedStatement maxRandomQty = DatabaseConnection.getConnection().prepareStatement(sqlString4);
                    maxRandomQty.executeUpdate(sqlString4);
                    sqlString5 = "update 毒雾副本奖励 set chance='" + this.毒雾奖励获得概率.getText() + "' where id=" + this.毒雾奖励序号.getText() + ";";
                    PreparedStatement chance = DatabaseConnection.getConnection().prepareStatement(sqlString5);
                    chance.executeUpdate(sqlString5);
                    刷新毒雾奖励();
                }
            } catch (SQLException ex) {
                Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请点击你需要修改的物品");
        }
    }//GEN-LAST:event_修改毒雾奖励ActionPerformed

    public void 刷新海盗副本奖励() {
        for (int i = ((DefaultTableModel) (this.海盗副本奖励.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.海盗副本奖励.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM 海盗副本奖励");
            rs = ps.executeQuery();
            while (rs.next()) {
                MapleDataProvider data = MapleDataProviderFactory.getDataProvider(new File(System.getProperty("net.sf.odinms.wzpath") + "/String.wz"));
                MapleData itemsData;
                int itemId;
                String itemName = "";
                itemsData = data.getData("Consume.img");
                for (MapleData itemFolder : itemsData.getChildren()) {
                    itemId = Integer.parseInt(itemFolder.getName());
                    if (rs.getInt("itemid") == itemId) {
                        itemName = MapleDataTool.getString("name", itemFolder, "NO-NAME");
                    }
                }
                itemsData = data.getData("Eqp.img").getChildByPath("Eqp");
                for (MapleData eqpType : itemsData.getChildren()) {
                    for (MapleData itemFolder : eqpType.getChildren()) {
                        itemId = Integer.parseInt(itemFolder.getName());
                        if (rs.getInt("itemid") == itemId) {
                            itemName = MapleDataTool.getString("name", itemFolder, "NO-NAME");
                        }
                    }
                }
                ((DefaultTableModel) 海盗副本奖励.getModel()).insertRow(海盗副本奖励.getRowCount(), new Object[]{rs.getInt("id"), rs.getInt("itemId"), rs.getInt("baseQty"), rs.getInt("maxRandomQty"), rs.getInt("chance"), itemName});

            }

        } catch (SQLException ex) {
            Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
        }
        海盗副本奖励.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                int i = 海盗副本奖励.getSelectedRow();
                String a = 海盗副本奖励.getValueAt(i, 0).toString();
                String a1 = 海盗副本奖励.getValueAt(i, 1).toString();
                String a2 = 海盗副本奖励.getValueAt(i, 2).toString();
                String a3 = 海盗副本奖励.getValueAt(i, 3).toString();
                String a4 = 海盗副本奖励.getValueAt(i, 4).toString();
                String a5 = 海盗副本奖励.getValueAt(i, 5).toString();
                海盗奖励序号.setText(a);
                海盗奖励代码.setText(a1);
                海盗奖励随机下限.setText(a2);
                海盗奖励随机上限.setText(a3);
                海盗奖励获得概率.setText(a4);
                海盗奖励名称.setText(a5);
            }
        });
    }

    public void 刷新月妙奖励() {
        for (int i = ((DefaultTableModel) (this.月妙副本奖励.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.月妙副本奖励.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM 月妙副本奖励");
            rs = ps.executeQuery();
            while (rs.next()) {
                MapleDataProvider data = MapleDataProviderFactory.getDataProvider(new File(System.getProperty("net.sf.odinms.wzpath") + "/String.wz"));
                MapleData itemsData;
                int itemId;
                String itemName = "";
                itemsData = data.getData("Consume.img");
                for (MapleData itemFolder : itemsData.getChildren()) {
                    itemId = Integer.parseInt(itemFolder.getName());
                    if (rs.getInt("itemid") == itemId) {
                        itemName = MapleDataTool.getString("name", itemFolder, "NO-NAME");
                    }
                }
                itemsData = data.getData("Eqp.img").getChildByPath("Eqp");
                for (MapleData eqpType : itemsData.getChildren()) {
                    for (MapleData itemFolder : eqpType.getChildren()) {
                        itemId = Integer.parseInt(itemFolder.getName());
                        if (rs.getInt("itemid") == itemId) {
                            itemName = MapleDataTool.getString("name", itemFolder, "NO-NAME");
                        }
                    }
                }
                ((DefaultTableModel) 月妙副本奖励.getModel()).insertRow(月妙副本奖励.getRowCount(), new Object[]{rs.getInt("id"), rs.getInt("itemId"), rs.getInt("baseQty"), rs.getInt("maxRandomQty"), rs.getInt("chance"), itemName});
            }

        } catch (SQLException ex) {
            Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
        }
        月妙副本奖励.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                int i = 月妙副本奖励.getSelectedRow();
                String a = 月妙副本奖励.getValueAt(i, 0).toString();
                String a1 = 月妙副本奖励.getValueAt(i, 1).toString();
                String a2 = 月妙副本奖励.getValueAt(i, 2).toString();
                String a3 = 月妙副本奖励.getValueAt(i, 3).toString();
                String a4 = 月妙副本奖励.getValueAt(i, 4).toString();
                String a5 = 月妙副本奖励.getValueAt(i, 5).toString();
                月妙奖励序号.setText(a);
                月妙奖励代码.setText(a1);
                月妙奖励随机下限.setText(a2);
                月妙奖励随机上限.setText(a3);
                月妙奖励获得概率.setText(a4);
                月妙奖励名称.setText(a5);
            }
        });

    }

    public void 刷新毒雾配置() {
        for (int i = ((DefaultTableModel) (this.毒雾森林最小人数.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.毒雾森林最小人数.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z毒雾森林 WHERE id = 1");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 毒雾森林最小人数.getModel()).insertRow(毒雾森林最小人数.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (int i = ((DefaultTableModel) (this.毒雾森林最大人数.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.毒雾森林最大人数.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z毒雾森林 WHERE id = 2");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 毒雾森林最大人数.getModel()).insertRow(毒雾森林最大人数.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.毒雾森林最低等级.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.毒雾森林最低等级.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z毒雾森林 WHERE id = 3");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 毒雾森林最低等级.getModel()).insertRow(毒雾森林最低等级.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.毒雾森林最高等级.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.毒雾森林最高等级.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z毒雾森林 WHERE id = 4");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 毒雾森林最高等级.getModel()).insertRow(毒雾森林最高等级.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.毒雾森林通关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.毒雾森林通关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z毒雾森林 WHERE id = 5");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 毒雾森林通关经验.getModel()).insertRow(毒雾森林通关经验.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.毒雾森林通关金币.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.毒雾森林通关金币.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z毒雾森林 WHERE id = 6");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 毒雾森林通关金币.getModel()).insertRow(毒雾森林通关金币.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void 刷新() {

        for (int i = ((DefaultTableModel) (this.刷新最小人数.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.刷新最小人数.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z月妙 WHERE id = 1");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 刷新最小人数.getModel()).insertRow(刷新最小人数.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.刷新最大人数.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.刷新最大人数.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z月妙 WHERE id = 2");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 刷新最大人数.getModel()).insertRow(刷新最大人数.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.刷新最低等级.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.刷新最低等级.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z月妙 WHERE id = 3");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 刷新最低等级.getModel()).insertRow(刷新最低等级.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.刷新最高等级.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.刷新最高等级.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z月妙 WHERE id = 4");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 刷新最高等级.getModel()).insertRow(刷新最高等级.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.月妙通关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.月妙通关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z月妙 WHERE id = 5");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 月妙通关经验.getModel()).insertRow(月妙通关经验.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        for (int i = ((DefaultTableModel) (this.月妙通关金币.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.月妙通关金币.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z月妙 WHERE id = 6");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 月妙通关金币.getModel()).insertRow(月妙通关金币.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void 刷新废都奖励() {
        for (int i = ((DefaultTableModel) (this.废都副本奖励.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.废都副本奖励.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM 废都副本奖励");
            rs = ps.executeQuery();
            while (rs.next()) {
                MapleDataProvider data = MapleDataProviderFactory.getDataProvider(new File(System.getProperty("net.sf.odinms.wzpath") + "/String.wz"));
                MapleData itemsData;
                int itemId;
                String itemName = "";
                itemsData = data.getData("Consume.img");
                for (MapleData itemFolder : itemsData.getChildren()) {
                    itemId = Integer.parseInt(itemFolder.getName());
                    if (rs.getInt("itemid") == itemId) {
                        itemName = MapleDataTool.getString("name", itemFolder, "NO-NAME");
                    }
                }
                itemsData = data.getData("Eqp.img").getChildByPath("Eqp");
                for (MapleData eqpType : itemsData.getChildren()) {
                    for (MapleData itemFolder : eqpType.getChildren()) {
                        itemId = Integer.parseInt(itemFolder.getName());
                        if (rs.getInt("itemid") == itemId) {
                            itemName = MapleDataTool.getString("name", itemFolder, "NO-NAME");
                        }
                    }
                }
                ((DefaultTableModel) 废都副本奖励.getModel()).insertRow(废都副本奖励.getRowCount(), new Object[]{rs.getInt("id"), rs.getInt("itemId"), rs.getInt("baseQty"), rs.getInt("maxRandomQty"), rs.getInt("chance"), itemName});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        废都副本奖励.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                int i = 废都副本奖励.getSelectedRow();
                String a = 废都副本奖励.getValueAt(i, 0).toString();
                String a1 = 废都副本奖励.getValueAt(i, 1).toString();
                String a2 = 废都副本奖励.getValueAt(i, 2).toString();
                String a3 = 废都副本奖励.getValueAt(i, 3).toString();
                String a4 = 废都副本奖励.getValueAt(i, 4).toString();
                String a5 = 废都副本奖励.getValueAt(i, 5).toString();
                废都奖励序号.setText(a);
                废都奖励代码.setText(a1);
                废都奖励随机下限.setText(a2);
                废都奖励随机上限.setText(a3);
                废都奖励获得概率.setText(a4);
                废都奖励名称.setText(a5);
            }
        });
    }

    public void 刷新海盗设置() {

        for (int i = ((DefaultTableModel) (this.海盗最小人数.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.海盗最小人数.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z海盗 WHERE id = 1");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 海盗最小人数.getModel()).insertRow(海盗最小人数.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        for (int i = ((DefaultTableModel) (this.海盗最大人数.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.海盗最大人数.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z海盗 WHERE id = 2");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 海盗最大人数.getModel()).insertRow(海盗最大人数.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        for (int i = ((DefaultTableModel) (this.海盗最低等级.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.海盗最低等级.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z海盗 WHERE id = 3");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 海盗最低等级.getModel()).insertRow(海盗最低等级.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        for (int i = ((DefaultTableModel) (this.海盗最高等级.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.海盗最高等级.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z海盗 WHERE id = 4");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 海盗最高等级.getModel()).insertRow(海盗最高等级.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.海盗通关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.海盗通关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z海盗 WHERE id = 5");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 海盗通关经验.getModel()).insertRow(海盗通关经验.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        for (int i = ((DefaultTableModel) (this.海盗通关金币.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.海盗通关金币.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z海盗 WHERE id = 6");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 海盗通关金币.getModel()).insertRow(海盗通关金币.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void 刷新废都() {

        for (int i = ((DefaultTableModel) (this.废都最小人数.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.废都最小人数.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z废弃沼泽 WHERE id = 1");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 废都最小人数.getModel()).insertRow(废都最小人数.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.废都最大人数.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.废都最大人数.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z废弃沼泽 WHERE id = 2");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 废都最大人数.getModel()).insertRow(废都最大人数.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.废都最低等级.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.废都最低等级.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z废弃沼泽 WHERE id = 3");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 废都最低等级.getModel()).insertRow(废都最低等级.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.废都最高等级.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.废都最高等级.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z废弃沼泽 WHERE id = 4");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 废都最高等级.getModel()).insertRow(废都最高等级.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.废都第一关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.废都第一关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z废弃沼泽 WHERE id = 5");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 废都第一关经验.getModel()).insertRow(废都第一关经验.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        for (int i = ((DefaultTableModel) (this.废都第2至4关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.废都第2至4关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z废弃沼泽 WHERE id = 6");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 废都第2至4关经验.getModel()).insertRow(废都第2至4关经验.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        for (int i = ((DefaultTableModel) (this.废都通关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.废都通关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z废弃沼泽 WHERE id = 7");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 废都通关经验.getModel()).insertRow(废都通关经验.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        for (int i = ((DefaultTableModel) (this.废都通关金币.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.废都通关金币.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z废弃沼泽 WHERE id = 7");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 废都通关金币.getModel()).insertRow(废都通关金币.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void 刷新玩具塔奖励() {
        for (int i = ((DefaultTableModel) (this.玩具塔副本奖励.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.玩具塔副本奖励.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM 玩具塔副本奖励");
            rs = ps.executeQuery();
            while (rs.next()) {
                MapleDataProvider data = MapleDataProviderFactory.getDataProvider(new File(System.getProperty("net.sf.odinms.wzpath") + "/String.wz"));
                MapleData itemsData;
                int itemId;
                String itemName = "";
                itemsData = data.getData("Consume.img");
                for (MapleData itemFolder : itemsData.getChildren()) {
                    itemId = Integer.parseInt(itemFolder.getName());
                    if (rs.getInt("itemid") == itemId) {
                        itemName = MapleDataTool.getString("name", itemFolder, "NO-NAME");
                    }
                }
                itemsData = data.getData("Eqp.img").getChildByPath("Eqp");
                for (MapleData eqpType : itemsData.getChildren()) {
                    for (MapleData itemFolder : eqpType.getChildren()) {
                        itemId = Integer.parseInt(itemFolder.getName());
                        if (rs.getInt("itemid") == itemId) {
                            itemName = MapleDataTool.getString("name", itemFolder, "NO-NAME");
                        }
                    }
                }
                ((DefaultTableModel) 玩具塔副本奖励.getModel()).insertRow(玩具塔副本奖励.getRowCount(), new Object[]{rs.getInt("id"), rs.getInt("itemId"), rs.getInt("baseQty"), rs.getInt("maxRandomQty"), rs.getInt("chance"), itemName});
            }
        } catch (SQLException ex) {
            Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
        }
        玩具塔副本奖励.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                int i = 玩具塔副本奖励.getSelectedRow();
                String a = 玩具塔副本奖励.getValueAt(i, 0).toString();
                String a1 = 玩具塔副本奖励.getValueAt(i, 1).toString();
                String a2 = 玩具塔副本奖励.getValueAt(i, 2).toString();
                String a3 = 玩具塔副本奖励.getValueAt(i, 3).toString();
                String a4 = 玩具塔副本奖励.getValueAt(i, 4).toString();
                String a5 = 玩具塔副本奖励.getValueAt(i, 5).toString();
                玩具塔奖励序号.setText(a);
                玩具塔奖励代码.setText(a1);
                玩具塔奖励随机下限.setText(a2);
                玩具塔奖励随机上限.setText(a3);
                玩具塔奖励获得概率.setText(a4);
                玩具塔奖励名称.setText(a5);
            }
        });

    }

    public void 刷新玩具塔设置() {

        for (int i = ((DefaultTableModel) (this.玩具塔最小人数.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.玩具塔最小人数.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z玩具塔 WHERE id = 1");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 玩具塔最小人数.getModel()).insertRow(玩具塔最小人数.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.玩具塔最大人数.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.玩具塔最大人数.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z玩具塔 WHERE id = 2");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 玩具塔最大人数.getModel()).insertRow(玩具塔最大人数.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.玩具塔最低等级.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.玩具塔最低等级.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z玩具塔 WHERE id = 3");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 玩具塔最低等级.getModel()).insertRow(玩具塔最低等级.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.玩具塔最高等级.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.玩具塔最高等级.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z玩具塔 WHERE id = 4");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 玩具塔最高等级.getModel()).insertRow(玩具塔最高等级.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.玩具塔第一关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.玩具塔第一关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z玩具塔 WHERE id = 5");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 玩具塔第一关经验.getModel()).insertRow(玩具塔第一关经验.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.玩具塔第二关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.玩具塔第二关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z玩具塔 WHERE id = 6");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 玩具塔第二关经验.getModel()).insertRow(玩具塔第二关经验.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.玩具塔第三关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.玩具塔第三关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z玩具塔 WHERE id = 7");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 玩具塔第三关经验.getModel()).insertRow(玩具塔第三关经验.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.玩具塔第四关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.玩具塔第四关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z玩具塔 WHERE id = 8");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 玩具塔第四关经验.getModel()).insertRow(玩具塔第四关经验.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.玩具塔第五关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.玩具塔第五关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z玩具塔 WHERE id = 9");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 玩具塔第五关经验.getModel()).insertRow(玩具塔第五关经验.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.玩具塔第七关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.玩具塔第七关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z玩具塔 WHERE id = 10");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 玩具塔第七关经验.getModel()).insertRow(玩具塔第七关经验.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.玩具塔第八关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.玩具塔第八关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z玩具塔 WHERE id = 11");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 玩具塔第八关经验.getModel()).insertRow(玩具塔第八关经验.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.玩具塔第九关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.玩具塔第九关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z玩具塔 WHERE id = 12");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 玩具塔第九关经验.getModel()).insertRow(玩具塔第九关经验.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.玩具塔通关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.玩具塔通关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z玩具塔 WHERE id = 13");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 玩具塔通关经验.getModel()).insertRow(玩具塔通关经验.getRowCount(), new Object[]{rs.getString("Point")});

            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.玩具塔通关金币.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.玩具塔通关金币.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z玩具塔 WHERE id = 15");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 玩具塔通关金币.getModel()).insertRow(玩具塔通关金币.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void 刷新玩具塔箱子() {
        for (int i = ((DefaultTableModel) (this.玩具塔奖励箱子.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.玩具塔奖励箱子.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM reactordrops WHERE reactorid = 2202004");
            rs = ps.executeQuery();
            while (rs.next()) {
                MapleDataProvider data = MapleDataProviderFactory.getDataProvider(new File(System.getProperty("net.sf.odinms.wzpath") + "/String.wz"));
                MapleData itemsData;
                int itemId;
                String itemName = "";
                itemsData = data.getData("Consume.img");
                for (MapleData itemFolder : itemsData.getChildren()) {
                    itemId = Integer.parseInt(itemFolder.getName());
                    if (rs.getInt("itemid") == itemId) {
                        itemName = MapleDataTool.getString("name", itemFolder, "NO-NAME");
                    }
                }
                itemsData = data.getData("Eqp.img").getChildByPath("Eqp");
                for (MapleData eqpType : itemsData.getChildren()) {
                    for (MapleData itemFolder : eqpType.getChildren()) {
                        itemId = Integer.parseInt(itemFolder.getName());
                        if (rs.getInt("itemid") == itemId) {
                            itemName = MapleDataTool.getString("name", itemFolder, "NO-NAME");
                        }
                    }
                }
                ((DefaultTableModel) 玩具塔奖励箱子.getModel()).insertRow(玩具塔奖励箱子.getRowCount(), new Object[]{rs.getInt("itemid"), rs.getInt("chance"), itemName});

            }

        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void 刷新毒雾奖励() {
        for (int i = ((DefaultTableModel) (this.毒雾副本奖励.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.毒雾副本奖励.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM 毒雾副本奖励");
            rs = ps.executeQuery();
            while (rs.next()) {
                MapleDataProvider data = MapleDataProviderFactory.getDataProvider(new File(System.getProperty("net.sf.odinms.wzpath") + "/String.wz"));
                MapleData itemsData;
                int itemId;
                String itemName = "";
                itemsData = data.getData("Consume.img");
                for (MapleData itemFolder : itemsData.getChildren()) {
                    itemId = Integer.parseInt(itemFolder.getName());
                    if (rs.getInt("itemid") == itemId) {
                        itemName = MapleDataTool.getString("name", itemFolder, "NO-NAME");
                    }
                }
                itemsData = data.getData("Eqp.img").getChildByPath("Eqp");
                for (MapleData eqpType : itemsData.getChildren()) {
                    for (MapleData itemFolder : eqpType.getChildren()) {
                        itemId = Integer.parseInt(itemFolder.getName());
                        if (rs.getInt("itemid") == itemId) {
                            itemName = MapleDataTool.getString("name", itemFolder, "NO-NAME");
                        }
                    }
                }
                ((DefaultTableModel) 毒雾副本奖励.getModel()).insertRow(毒雾副本奖励.getRowCount(), new Object[]{rs.getInt("id"), rs.getInt("itemId"), rs.getInt("baseQty"), rs.getInt("maxRandomQty"), rs.getInt("chance"), itemName});
            }

        } catch (SQLException ex) {
            Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
        }
        毒雾副本奖励.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                int i = 毒雾副本奖励.getSelectedRow();
                String a = 毒雾副本奖励.getValueAt(i, 0).toString();
                String a1 = 毒雾副本奖励.getValueAt(i, 1).toString();
                String a2 = 毒雾副本奖励.getValueAt(i, 2).toString();
                String a3 = 毒雾副本奖励.getValueAt(i, 3).toString();
                String a4 = 毒雾副本奖励.getValueAt(i, 4).toString();
                String a5 = 毒雾副本奖励.getValueAt(i, 5).toString();
                毒雾奖励序号.setText(a);
                毒雾奖励代码.setText(a1);
                毒雾奖励随机下限.setText(a2);
                毒雾奖励随机上限.setText(a3);
                毒雾奖励获得概率.setText(a4);
                毒雾奖励名称.setText(a5);
            }
        });
    }

    public void 刷新女神塔奖励() {
        for (int i = ((DefaultTableModel) (this.女神塔副本奖励.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.女神塔副本奖励.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM 女神塔副本奖励");
            rs = ps.executeQuery();
            while (rs.next()) {
                MapleDataProvider data = MapleDataProviderFactory.getDataProvider(new File(System.getProperty("net.sf.odinms.wzpath") + "/String.wz"));
                MapleData itemsData;
                int itemId;
                String itemName = "";
                itemsData = data.getData("Consume.img");
                for (MapleData itemFolder : itemsData.getChildren()) {
                    itemId = Integer.parseInt(itemFolder.getName());
                    if (rs.getInt("itemid") == itemId) {
                        itemName = MapleDataTool.getString("name", itemFolder, "NO-NAME");
                    }
                }
                itemsData = data.getData("Eqp.img").getChildByPath("Eqp");
                for (MapleData eqpType : itemsData.getChildren()) {
                    for (MapleData itemFolder : eqpType.getChildren()) {
                        itemId = Integer.parseInt(itemFolder.getName());
                        if (rs.getInt("itemid") == itemId) {
                            itemName = MapleDataTool.getString("name", itemFolder, "NO-NAME");
                        }
                    }
                }
                ((DefaultTableModel) 女神塔副本奖励.getModel()).insertRow(女神塔副本奖励.getRowCount(), new Object[]{rs.getInt("id"), rs.getInt("itemId"), rs.getInt("baseQty"), rs.getInt("maxRandomQty"), rs.getInt("chance"), itemName});

            }
        } catch (SQLException ex) {
            Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
        }
        女神塔副本奖励.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                int i = 女神塔副本奖励.getSelectedRow();
                String a = 女神塔副本奖励.getValueAt(i, 0).toString();
                String a1 = 女神塔副本奖励.getValueAt(i, 1).toString();
                String a2 = 女神塔副本奖励.getValueAt(i, 2).toString();
                String a3 = 女神塔副本奖励.getValueAt(i, 3).toString();
                String a4 = 女神塔副本奖励.getValueAt(i, 4).toString();
                String a5 = 女神塔副本奖励.getValueAt(i, 5).toString();
                女神塔奖励序号.setText(a);
                女神塔奖励代码.setText(a1);
                女神塔奖励随机下限.setText(a2);
                女神塔奖励随机上限.setText(a3);
                女神塔奖励获得概率.setText(a4);
                女神塔奖励名称.setText(a5);
            }
        });
    }

    public void 刷新女神塔设置() {

        for (int i = ((DefaultTableModel) (this.女神塔最小人数.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.女神塔最小人数.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z女神塔 WHERE id = 1");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 女神塔最小人数.getModel()).insertRow(女神塔最小人数.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.女神塔最大人数.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.女神塔最大人数.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z女神塔 WHERE id = 2");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 女神塔最大人数.getModel()).insertRow(女神塔最大人数.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.女神塔最低等级.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.女神塔最低等级.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z女神塔 WHERE id = 3");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 女神塔最低等级.getModel()).insertRow(女神塔最低等级.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.女神塔最高等级.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.女神塔最高等级.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z女神塔 WHERE id = 4");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 女神塔最高等级.getModel()).insertRow(女神塔最高等级.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.女神塔第一关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.女神塔第一关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z女神塔 WHERE id = 5");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 女神塔第一关经验.getModel()).insertRow(女神塔第一关经验.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.女神塔仓库经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.女神塔仓库经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z女神塔 WHERE id = 6");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 女神塔仓库经验.getModel()).insertRow(女神塔仓库经验.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.女神塔休息室经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.女神塔休息室经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z女神塔 WHERE id = 7");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 女神塔休息室经验.getModel()).insertRow(女神塔休息室经验.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.女神塔封印室经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.女神塔封印室经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z女神塔 WHERE id = 8");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 女神塔封印室经验.getModel()).insertRow(女神塔封印室经验.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.女神塔大厅经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.女神塔大厅经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z女神塔 WHERE id = 9");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 女神塔大厅经验.getModel()).insertRow(女神塔大厅经验.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.女神塔散步路经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.女神塔散步路经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z女神塔 WHERE id = 10");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 女神塔散步路经验.getModel()).insertRow(女神塔散步路经验.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.女神塔通道经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.女神塔通道经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z女神塔 WHERE id = 11");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 女神塔通道经验.getModel()).insertRow(女神塔通道经验.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = ((DefaultTableModel) (this.女神塔通关经验.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.女神塔通关经验.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z女神塔 WHERE id = 12");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 女神塔通关经验.getModel()).insertRow(女神塔通关经验.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        for (int i = ((DefaultTableModel) (this.女神塔通关金币.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.女神塔通关金币.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM z女神塔 WHERE id = 13");
            rs = ps.executeQuery();
            while (rs.next()) {
                ((DefaultTableModel) 女神塔通关金币.getModel()).insertRow(女神塔通关金币.getRowCount(), new Object[]{rs.getString("Point")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void 刷新女神塔箱子() {
        for (int i = ((DefaultTableModel) (this.女神塔奖励箱子.getModel())).getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) (this.女神塔奖励箱子.getModel())).removeRow(i);
        }
        try {
            Connection con = DatabaseConnection.getConnection();
            PreparedStatement ps = null;

            ResultSet rs = null;
            ps = con.prepareStatement("SELECT * FROM reactordrops WHERE reactorid = 2002014");
            rs = ps.executeQuery();
            while (rs.next()) {
                MapleDataProvider data = MapleDataProviderFactory.getDataProvider(new File(System.getProperty("net.sf.odinms.wzpath") + "/String.wz"));
                MapleData itemsData;
                int itemId;
                String itemName = "";
                itemsData = data.getData("Consume.img");
                for (MapleData itemFolder : itemsData.getChildren()) {
                    itemId = Integer.parseInt(itemFolder.getName());
                    if (rs.getInt("itemid") == itemId) {
                        itemName = MapleDataTool.getString("name", itemFolder, "NO-NAME");
                    }
                }
                itemsData = data.getData("Eqp.img").getChildByPath("Eqp");
                for (MapleData eqpType : itemsData.getChildren()) {
                    for (MapleData itemFolder : eqpType.getChildren()) {
                        itemId = Integer.parseInt(itemFolder.getName());
                        if (rs.getInt("itemid") == itemId) {
                            itemName = MapleDataTool.getString("name", itemFolder, "NO-NAME");
                        }
                    }
                }
                ((DefaultTableModel) 女神塔奖励箱子.getModel()).insertRow(女神塔奖励箱子.getRowCount(), new Object[]{rs.getInt("itemid"), rs.getInt("chance"), itemName});

            }

        } catch (SQLException ex) {
            Logger.getLogger(ZeroMS_UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(副本控制台.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        副本控制台.setDefaultLookAndFeelDecorated(true);
        JDialog.setDefaultLookAndFeelDecorated(true);
        try {
            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
            UIManager.setLookAndFeel(new SubstanceBusinessBlackSteelLookAndFeel());
            // UIManager.setLookAndFeel(new SubstanceBusinessLookAndFeel());
        } catch (Exception e) {
            e.printStackTrace();
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new 副本控制台().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JLabel jLabel103;
    private javax.swing.JLabel jLabel106;
    private javax.swing.JLabel jLabel107;
    private javax.swing.JLabel jLabel108;
    private javax.swing.JLabel jLabel109;
    private javax.swing.JLabel jLabel110;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel118;
    private javax.swing.JLabel jLabel120;
    private javax.swing.JLabel jLabel207;
    private javax.swing.JLabel jLabel208;
    private javax.swing.JLabel jLabel209;
    private javax.swing.JLabel jLabel210;
    private javax.swing.JLabel jLabel211;
    private javax.swing.JLabel jLabel212;
    private javax.swing.JLabel jLabel219;
    private javax.swing.JLabel jLabel220;
    private javax.swing.JLabel jLabel221;
    private javax.swing.JLabel jLabel222;
    private javax.swing.JLabel jLabel223;
    private javax.swing.JLabel jLabel224;
    private javax.swing.JLabel jLabel225;
    private javax.swing.JLabel jLabel226;
    private javax.swing.JLabel jLabel227;
    private javax.swing.JLabel jLabel228;
    private javax.swing.JLabel jLabel229;
    private javax.swing.JLabel jLabel230;
    private javax.swing.JLabel jLabel231;
    private javax.swing.JLabel jLabel232;
    private javax.swing.JLabel jLabel233;
    private javax.swing.JLabel jLabel234;
    private javax.swing.JLabel jLabel235;
    private javax.swing.JLabel jLabel236;
    private javax.swing.JLabel jLabel237;
    private javax.swing.JLabel jLabel238;
    private javax.swing.JLabel jLabel239;
    private javax.swing.JLabel jLabel240;
    private javax.swing.JLabel jLabel241;
    private javax.swing.JLabel jLabel242;
    private javax.swing.JLabel jLabel243;
    private javax.swing.JLabel jLabel244;
    private javax.swing.JLabel jLabel245;
    private javax.swing.JLabel jLabel246;
    private javax.swing.JLabel jLabel247;
    private javax.swing.JLabel jLabel248;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane100;
    private javax.swing.JScrollPane jScrollPane101;
    private javax.swing.JScrollPane jScrollPane102;
    private javax.swing.JScrollPane jScrollPane103;
    private javax.swing.JScrollPane jScrollPane35;
    private javax.swing.JScrollPane jScrollPane36;
    private javax.swing.JScrollPane jScrollPane37;
    private javax.swing.JScrollPane jScrollPane38;
    private javax.swing.JScrollPane jScrollPane39;
    private javax.swing.JScrollPane jScrollPane40;
    private javax.swing.JScrollPane jScrollPane41;
    private javax.swing.JScrollPane jScrollPane42;
    private javax.swing.JScrollPane jScrollPane43;
    private javax.swing.JScrollPane jScrollPane44;
    private javax.swing.JScrollPane jScrollPane45;
    private javax.swing.JScrollPane jScrollPane46;
    private javax.swing.JScrollPane jScrollPane47;
    private javax.swing.JScrollPane jScrollPane48;
    private javax.swing.JScrollPane jScrollPane49;
    private javax.swing.JScrollPane jScrollPane51;
    private javax.swing.JScrollPane jScrollPane52;
    private javax.swing.JScrollPane jScrollPane53;
    private javax.swing.JScrollPane jScrollPane54;
    private javax.swing.JScrollPane jScrollPane55;
    private javax.swing.JScrollPane jScrollPane56;
    private javax.swing.JScrollPane jScrollPane57;
    private javax.swing.JScrollPane jScrollPane58;
    private javax.swing.JScrollPane jScrollPane59;
    private javax.swing.JScrollPane jScrollPane60;
    private javax.swing.JScrollPane jScrollPane61;
    private javax.swing.JScrollPane jScrollPane62;
    private javax.swing.JScrollPane jScrollPane63;
    private javax.swing.JScrollPane jScrollPane64;
    private javax.swing.JScrollPane jScrollPane65;
    private javax.swing.JScrollPane jScrollPane67;
    private javax.swing.JScrollPane jScrollPane68;
    private javax.swing.JScrollPane jScrollPane69;
    private javax.swing.JScrollPane jScrollPane70;
    private javax.swing.JScrollPane jScrollPane71;
    private javax.swing.JScrollPane jScrollPane72;
    private javax.swing.JScrollPane jScrollPane73;
    private javax.swing.JScrollPane jScrollPane74;
    private javax.swing.JScrollPane jScrollPane75;
    private javax.swing.JScrollPane jScrollPane76;
    private javax.swing.JScrollPane jScrollPane77;
    private javax.swing.JScrollPane jScrollPane78;
    private javax.swing.JScrollPane jScrollPane79;
    private javax.swing.JScrollPane jScrollPane80;
    private javax.swing.JScrollPane jScrollPane81;
    private javax.swing.JScrollPane jScrollPane82;
    private javax.swing.JScrollPane jScrollPane83;
    private javax.swing.JScrollPane jScrollPane84;
    private javax.swing.JScrollPane jScrollPane85;
    private javax.swing.JScrollPane jScrollPane86;
    private javax.swing.JScrollPane jScrollPane87;
    private javax.swing.JScrollPane jScrollPane88;
    private javax.swing.JScrollPane jScrollPane89;
    private javax.swing.JScrollPane jScrollPane90;
    private javax.swing.JScrollPane jScrollPane91;
    private javax.swing.JScrollPane jScrollPane92;
    private javax.swing.JScrollPane jScrollPane93;
    private javax.swing.JScrollPane jScrollPane94;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JButton 修改1;
    private javax.swing.JButton 修改2;
    private javax.swing.JButton 修改3;
    private javax.swing.JButton 修改4;
    private javax.swing.JButton 修改5;
    private javax.swing.JButton 修改6;
    private javax.swing.JButton 修改女神塔奖励;
    private javax.swing.JButton 修改废都奖励;
    private javax.swing.JButton 修改月妙奖励;
    private javax.swing.JButton 修改毒雾奖励;
    private javax.swing.JButton 修改海盗奖励;
    private javax.swing.JButton 修改玩具塔奖励;
    private javax.swing.JButton 删除女神塔奖励;
    private javax.swing.JButton 删除女神箱子物品;
    private javax.swing.JTextField 删除女神箱子物品代码;
    private javax.swing.JButton 删除废都奖励;
    private javax.swing.JButton 删除月妙奖励;
    private javax.swing.JButton 删除毒雾奖励;
    private javax.swing.JButton 删除海盗奖励;
    private javax.swing.JButton 删除玩具塔奖励;
    private javax.swing.JButton 删除玩具箱子物品;
    private javax.swing.JButton 删除玩具箱子物品1;
    private javax.swing.JButton 删除玩具箱子物品3;
    private javax.swing.JTextField 删除玩具箱子物品代码;
    private javax.swing.JButton 刷新女神塔副本奖励;
    private javax.swing.JButton 刷新女神塔设置;
    private javax.swing.JButton 刷新女神塔设置1;
    private javax.swing.JButton 刷新废都副本奖励;
    private javax.swing.JButton 刷新废都设置;
    private javax.swing.JTable 刷新最低等级;
    private javax.swing.JTable 刷新最大人数;
    private javax.swing.JTable 刷新最小人数;
    private javax.swing.JTable 刷新最高等级;
    private javax.swing.JButton 刷新月妙副本奖励;
    private javax.swing.JButton 刷新月妙副本奖励1;
    private javax.swing.JButton 刷新月妙设置;
    private javax.swing.JButton 刷新毒雾森林设置;
    private javax.swing.JButton 刷新海盗副本奖励;
    private javax.swing.JButton 刷新海盗设置;
    private javax.swing.JButton 刷新玩具塔副本奖励;
    private javax.swing.JButton 刷新玩具塔箱子;
    private javax.swing.JButton 刷新玩具塔设置;
    private javax.swing.JTextField 增加女神箱子物品;
    private javax.swing.JTextField 增加玩具箱子物品;
    private javax.swing.JTextField 女神塔1;
    private javax.swing.JTextField 女神塔10;
    private javax.swing.JTextField 女神塔11;
    private javax.swing.JTextField 女神塔12;
    private javax.swing.JTextField 女神塔13;
    private javax.swing.JTextField 女神塔2;
    private javax.swing.JTextField 女神塔3;
    private javax.swing.JTextField 女神塔4;
    private javax.swing.JTextField 女神塔5;
    private javax.swing.JTextField 女神塔6;
    private javax.swing.JTextField 女神塔7;
    private javax.swing.JTextField 女神塔8;
    private javax.swing.JTextField 女神塔9;
    private javax.swing.JTable 女神塔仓库经验;
    private javax.swing.JTable 女神塔休息室经验;
    private javax.swing.JButton 女神塔修改1;
    private javax.swing.JButton 女神塔修改10;
    private javax.swing.JButton 女神塔修改11;
    private javax.swing.JButton 女神塔修改12;
    private javax.swing.JButton 女神塔修改13;
    private javax.swing.JButton 女神塔修改2;
    private javax.swing.JButton 女神塔修改3;
    private javax.swing.JButton 女神塔修改4;
    private javax.swing.JButton 女神塔修改5;
    private javax.swing.JButton 女神塔修改6;
    private javax.swing.JButton 女神塔修改7;
    private javax.swing.JButton 女神塔修改8;
    private javax.swing.JButton 女神塔修改9;
    private javax.swing.JTable 女神塔副本奖励;
    private javax.swing.JTable 女神塔大厅经验;
    private javax.swing.JTextField 女神塔奖励代码;
    private javax.swing.JTextField 女神塔奖励名称;
    private javax.swing.JTextField 女神塔奖励序号;
    private javax.swing.JTable 女神塔奖励箱子;
    private javax.swing.JTextField 女神塔奖励获得概率;
    private javax.swing.JTextField 女神塔奖励随机上限;
    private javax.swing.JTextField 女神塔奖励随机下限;
    private javax.swing.JTable 女神塔封印室经验;
    private javax.swing.JTable 女神塔散步路经验;
    private javax.swing.JTable 女神塔最低等级;
    private javax.swing.JTable 女神塔最大人数;
    private javax.swing.JTable 女神塔最小人数;
    private javax.swing.JTable 女神塔最高等级;
    private javax.swing.JTable 女神塔第一关经验;
    private javax.swing.JTable 女神塔通关经验;
    private javax.swing.JTable 女神塔通关金币;
    private javax.swing.JTable 女神塔通道经验;
    private javax.swing.JTextField 女神箱子物品概率;
    private javax.swing.JTextField 废都1;
    private javax.swing.JTextField 废都2;
    private javax.swing.JTextField 废都3;
    private javax.swing.JTextField 废都4;
    private javax.swing.JTextField 废都5;
    private javax.swing.JTextField 废都6;
    private javax.swing.JTextField 废都7;
    private javax.swing.JTextField 废都8;
    private javax.swing.JButton 废都修改1;
    private javax.swing.JButton 废都修改2;
    private javax.swing.JButton 废都修改3;
    private javax.swing.JButton 废都修改4;
    private javax.swing.JButton 废都修改5;
    private javax.swing.JButton 废都修改6;
    private javax.swing.JButton 废都修改7;
    private javax.swing.JButton 废都修改8;
    private javax.swing.JTable 废都副本奖励;
    private javax.swing.JTextField 废都奖励代码;
    private javax.swing.JTextField 废都奖励名称;
    private javax.swing.JTextField 废都奖励序号;
    private javax.swing.JTextField 废都奖励获得概率;
    private javax.swing.JTextField 废都奖励随机上限;
    private javax.swing.JTextField 废都奖励随机下限;
    private javax.swing.JTable 废都最低等级;
    private javax.swing.JTable 废都最大人数;
    private javax.swing.JTable 废都最小人数;
    private javax.swing.JTable 废都最高等级;
    private javax.swing.JTable 废都第2至4关经验;
    private javax.swing.JTable 废都第一关经验;
    private javax.swing.JTable 废都通关经验;
    private javax.swing.JTable 废都通关金币;
    private javax.swing.JTextField 挖矿序列号1;
    private javax.swing.JTextField 挖矿序列号2;
    private javax.swing.JButton 新增女神塔奖励;
    private javax.swing.JButton 新增废都奖励;
    private javax.swing.JButton 新增月妙奖励;
    private javax.swing.JButton 新增毒雾奖励;
    private javax.swing.JButton 新增海盗奖励;
    private javax.swing.JButton 新增玩具塔奖励;
    private javax.swing.JButton 新增玩具箱子物品;
    private javax.swing.JButton 新增玩具箱子物品1;
    private javax.swing.JTextField 月妙1;
    private javax.swing.JTextField 月妙2;
    private javax.swing.JTextField 月妙3;
    private javax.swing.JTextField 月妙4;
    private javax.swing.JTextField 月妙5;
    private javax.swing.JTextField 月妙6;
    private javax.swing.JTable 月妙副本奖励;
    private javax.swing.JTextField 月妙奖励代码;
    private javax.swing.JTextField 月妙奖励名称;
    private javax.swing.JTextField 月妙奖励序号;
    private javax.swing.JTextField 月妙奖励获得概率;
    private javax.swing.JTextField 月妙奖励随机上限;
    private javax.swing.JTextField 月妙奖励随机下限;
    private javax.swing.JTable 月妙通关经验;
    private javax.swing.JTable 月妙通关金币;
    private javax.swing.JTable 毒雾副本奖励;
    private javax.swing.JTextField 毒雾奖励代码;
    private javax.swing.JTextField 毒雾奖励名称;
    private javax.swing.JTextField 毒雾奖励序号;
    private javax.swing.JTextField 毒雾奖励获得概率;
    private javax.swing.JTextField 毒雾奖励随机上限;
    private javax.swing.JTextField 毒雾奖励随机下限;
    private javax.swing.JPanel 毒雾森林;
    private javax.swing.JTextField 毒雾森林1;
    private javax.swing.JButton 毒雾森林10;
    private javax.swing.JTextField 毒雾森林2;
    private javax.swing.JButton 毒雾森林20;
    private javax.swing.JTextField 毒雾森林3;
    private javax.swing.JButton 毒雾森林30;
    private javax.swing.JTextField 毒雾森林4;
    private javax.swing.JButton 毒雾森林40;
    private javax.swing.JTextField 毒雾森林5;
    private javax.swing.JButton 毒雾森林50;
    private javax.swing.JTextField 毒雾森林6;
    private javax.swing.JButton 毒雾森林60;
    private javax.swing.JTable 毒雾森林最低等级;
    private javax.swing.JTable 毒雾森林最大人数;
    private javax.swing.JTable 毒雾森林最小人数;
    private javax.swing.JTable 毒雾森林最高等级;
    private javax.swing.JTable 毒雾森林通关经验;
    private javax.swing.JTable 毒雾森林通关金币;
    private javax.swing.JButton 海盗1;
    private javax.swing.JButton 海盗2;
    private javax.swing.JButton 海盗3;
    private javax.swing.JButton 海盗4;
    private javax.swing.JButton 海盗5;
    private javax.swing.JButton 海盗6;
    private javax.swing.JTable 海盗副本奖励;
    private javax.swing.JTextField 海盗奖励代码;
    private javax.swing.JTextField 海盗奖励名称;
    private javax.swing.JTextField 海盗奖励序号;
    private javax.swing.JTextField 海盗奖励获得概率;
    private javax.swing.JTextField 海盗奖励随机上限;
    private javax.swing.JTextField 海盗奖励随机下限;
    private javax.swing.JTable 海盗最低等级;
    private javax.swing.JTextField 海盗最低等级代码;
    private javax.swing.JTable 海盗最大人数;
    private javax.swing.JTextField 海盗最大人数代码;
    private javax.swing.JTable 海盗最小人数;
    private javax.swing.JTextField 海盗最小人数代码;
    private javax.swing.JTable 海盗最高等级;
    private javax.swing.JTextField 海盗最高等级代码;
    private javax.swing.JTable 海盗通关经验;
    private javax.swing.JTextField 海盗通关经验代码;
    private javax.swing.JTable 海盗通关金币;
    private javax.swing.JTextField 海盗通关金币代码;
    private javax.swing.JTextField 玩具塔1;
    private javax.swing.JTextField 玩具塔10;
    private javax.swing.JTextField 玩具塔11;
    private javax.swing.JTextField 玩具塔12;
    private javax.swing.JTextField 玩具塔13;
    private javax.swing.JTextField 玩具塔14;
    private javax.swing.JTextField 玩具塔15;
    private javax.swing.JTextField 玩具塔2;
    private javax.swing.JTextField 玩具塔3;
    private javax.swing.JTextField 玩具塔4;
    private javax.swing.JTextField 玩具塔5;
    private javax.swing.JTextField 玩具塔6;
    private javax.swing.JTextField 玩具塔7;
    private javax.swing.JTextField 玩具塔8;
    private javax.swing.JTextField 玩具塔9;
    private javax.swing.JButton 玩具塔修改1;
    private javax.swing.JButton 玩具塔修改10;
    private javax.swing.JButton 玩具塔修改11;
    private javax.swing.JButton 玩具塔修改12;
    private javax.swing.JButton 玩具塔修改13;
    private javax.swing.JButton 玩具塔修改14;
    private javax.swing.JButton 玩具塔修改15;
    private javax.swing.JButton 玩具塔修改2;
    private javax.swing.JButton 玩具塔修改3;
    private javax.swing.JButton 玩具塔修改4;
    private javax.swing.JButton 玩具塔修改5;
    private javax.swing.JButton 玩具塔修改6;
    private javax.swing.JButton 玩具塔修改7;
    private javax.swing.JButton 玩具塔修改8;
    private javax.swing.JButton 玩具塔修改9;
    private javax.swing.JTable 玩具塔副本奖励;
    private javax.swing.JTextField 玩具塔奖励代码;
    private javax.swing.JTextField 玩具塔奖励名称;
    private javax.swing.JTextField 玩具塔奖励序号;
    private javax.swing.JTable 玩具塔奖励箱子;
    private javax.swing.JTextField 玩具塔奖励获得概率;
    private javax.swing.JTextField 玩具塔奖励随机上限;
    private javax.swing.JTextField 玩具塔奖励随机下限;
    private javax.swing.JTable 玩具塔最低等级;
    private javax.swing.JTable 玩具塔最大人数;
    private javax.swing.JTable 玩具塔最小人数;
    private javax.swing.JTable 玩具塔最高等级;
    private javax.swing.JTable 玩具塔第一关经验;
    private javax.swing.JTable 玩具塔第七关经验;
    private javax.swing.JTable 玩具塔第三关经验;
    private javax.swing.JTable 玩具塔第九关经验;
    private javax.swing.JTable 玩具塔第二关经验;
    private javax.swing.JTable 玩具塔第五关经验;
    private javax.swing.JTable 玩具塔第八关经验;
    private javax.swing.JTable 玩具塔第六关经验;
    private javax.swing.JTable 玩具塔第四关经验;
    private javax.swing.JTable 玩具塔通关经验;
    private javax.swing.JTable 玩具塔通关金币;
    private javax.swing.JTextField 玩具箱子物品概率;
    private javax.swing.JPanel 罗密欧;
    // End of variables declaration//GEN-END:variables

}
